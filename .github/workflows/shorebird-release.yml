name: Shorebird Release

on:
  workflow_call:
    inputs:
      version:
        description: "Versão da release"
        required: true
        type: string
      release_notes:
        description: "Notas da release"
        required: true
        type: string
    outputs:
      release-created:
        description: "Release foi criada"
        value: ${{ jobs.create-release.outputs.release-created }}
      version-updated:
        description: "Versão foi atualizada no pubspec.yaml"
        value: ${{ jobs.create-release.outputs.version-updated }}
      changelog-updated:
        description: "CHANGELOG.md foi atualizado"
        value: ${{ jobs.create-release.outputs.changelog-updated }}
      tag-created:
        description: "Tag foi criada"
        value: ${{ jobs.create-release.outputs.tag-created }}
      github-release-created:
        description: "GitHub release foi criada"
        value: ${{ jobs.create-release.outputs.github-release-created }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      release-created: ${{ steps.shorebird-release.outputs.release-created }}
      version-updated: ${{ steps.update-version.outputs.version-updated }}
      changelog-updated: ${{ steps.update-changelog.outputs.changelog-updated }}
      tag-created: ${{ steps.git-tag.outputs.tag-created }}
      github-release-created: ${{ steps.github-release.outputs.github-release-created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Inputs
        shell: powershell
        run: |
          if (-Not ("${{ inputs.version }}")) {
            Write-Error "ERRO FATAL: O input 'version' é obrigatório e não foi fornecido."
            exit 1
          }
          if (-Not ("${{ inputs.release_notes }}")) {
            Write-Error "ERRO FATAL: O input 'release_notes' é obrigatório e não foi fornecido."
            exit 1
          }
          Write-Output "Inputs 'version' e 'release_notes' validados com sucesso."

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true
          
      - name: Enable Git Long Paths
        shell: bash
        run: |
          echo "Habilitando suporte a long paths no Git..."
          git config --global core.longpaths true
          echo "Configuração de long paths aplicada."

      - name: Verify Shorebird Configuration
        shell: powershell
        run: |
          Write-Output "Verificando configuracao do Shorebird..."
          try {
            shorebird --version
            Write-Output "Verificando acesso às releases..."
            shorebird releases list | Out-Null
            Write-Output "Configuração do Shorebird parece OK."
          } catch {
            Write-Error "Erro na verificacao do Shorebird: $_"
            throw "Configuracao do Shorebird invalida"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Install Dependencies
        shell: powershell
        run: |
          flutter pub get
          flutter analyze --no-fatal-warnings

      - name: Validate Release Version
        id: validate-release
        shell: powershell
        run: |
          Write-Output "Validacao pre-release da versao ${{ inputs.version }}..."
          $version = "${{ inputs.version }}"
          try {
            $existingReleases = shorebird releases list 2>$null
            if ($existingReleases -and ($existingReleases | Select-String -Pattern $version -Quiet)) {
              throw "Release $version ja existe no Shorebird."
            } else {
              Write-Output "Versao $version e unica e pode ser criada."
            }
          } catch {
            Write-Error "Erro ao validar a versao: $_"
            throw
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Create Shorebird Release
        id: shorebird-release
        shell: powershell
        run: |
          Write-Output "Criando release Shorebird para Windows..."
          try {
            shorebird release windows --force 
            Write-Output "Release Shorebird criada com sucesso!"
            echo "release-created=true" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Error "Erro durante criacao da release Shorebird: $_"
            echo "release-created=false" >> $env:GITHUB_OUTPUT
            throw "Falha na criacao da release Shorebird"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Update Version in pubspec.yaml
        id: update-version
        shell: powershell
        if: steps.shorebird-release.outputs.release-created == 'true'
        run: |
          Write-Output "Atualizando versao no pubspec.yaml..."
          $pubspecPath = "pubspec.yaml"
          try {
            $pubspecContent = Get-Content $pubspecPath -Raw
            if ($pubspecContent -match 'version:\s*(\d+\.\d+\.\d+)\+?(\d*)') {
              $currentVersion = $matches[1]
              $newVersion = "${{ inputs.version }}"
              $newContent = $pubspecContent -replace "version: $currentVersion\+\d*", "version: $newVersion"
              Set-Content -Path $pubspecPath -Value $newContent
              Write-Output "Versao atualizada no pubspec.yaml para: $newVersion"
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add $pubspecPath
              git commit -m "chore: set version to $newVersion for release"
              git push
              echo "version-updated=true" >> $env:GITHUB_OUTPUT
            } else {
              Write-Warning "Nao foi possivel encontrar o padrao de versao no pubspec.yaml."
              echo "version-updated=false" >> $env:GITHUB_OUTPUT
            }
          } catch {
            Write-Error "Erro ao atualizar versao no pubspec.yaml: $_"
            echo "version-updated=false" >> $env:GITHUB_OUTPUT
          }

      - name: Update CHANGELOG.md
        id: update-changelog
        shell: powershell
        if: steps.shorebird-release.outputs.release-created == 'true'
        run: |
          Write-Output "Atualizando CHANGELOG.md..."
          $newVersion = "${{ inputs.version }}"
          $date = Get-Date -Format "yyyy-MM-dd"
          $releaseNotes = "${{ inputs.release_notes }}"
          $changelogEntry = "## [$newVersion] - $date`n`n### Mudancas`n$releaseNotes`n"
          try {
            if (Test-Path "CHANGELOG.md") {
              $existingChangelog = Get-Content "CHANGELOG.md" -Raw
              $newChangelog = $changelogEntry + "`n" + $existingChangelog
            } else {
              $header = "# Changelog`n`nTodas as mudancas importantes do projeto sao documentadas neste arquivo."
              $newChangelog = "$header`n`n$changelogEntry"
            }
            Set-Content "CHANGELOG.md" $newChangelog -Encoding UTF8
            Write-Output "CHANGELOG.md atualizado."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for v$newVersion"
            git push
            echo "changelog-updated=true" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Error "Erro ao atualizar CHANGELOG.md: $_"
            echo "changelog-updated=false" >> $env:GITHUB_OUTPUT
          }

      - name: Create Git Tag
        id: git-tag
        shell: powershell
        if: steps.shorebird-release.outputs.release-created == 'true'
        run: |
          $version = "${{ inputs.version }}"
          $tag = "v$version"
          Write-Output "Criando tag Git: $tag"
          try {
            if (git rev-parse $tag 2>$null) {
              Write-Warning "Tag $tag ja existe. Nenhuma acao sera tomada."
            } else {
              git tag -a $tag -m "Release $version"
              git push origin $tag
              Write-Output "Tag $tag criada e enviada para o repositorio remoto."
            }
            echo "tag-created=true" >> $env:GITHUB_OUTPUT
            echo "tag-name=$tag" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Error "Erro na criacao da tag Git: $_"
            echo "tag-created=false" >> $env:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: github-release
        if: steps.git-tag.outputs.tag-created == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.git-tag.outputs.tag-name }}
          release_name: "Release v${{ inputs.version }}"
          body: |
            ${{ inputs.release_notes }}
          draft: false
          prerelease: false

      - name: Summary
        shell: powershell
        if: always()
        run: |
          Write-Output ""
          Write-Output "RESUMO DA RELEASE"
          Write-Output "=================="
          Write-Output "Versao Solicitada: ${{ inputs.version }}"
          Write-Output "Shorebird Release Criada: ${{ steps.shorebird-release.outputs.release-created }}"
          Write-Output "Versao no pubspec.yaml Atualizada: ${{ steps.update-version.outputs.version-updated }}"
          Write-Output "CHANGELOG.md Atualizado: ${{ steps.update-changelog.outputs.changelog-updated }}"
          Write-Output "Git Tag Criada: ${{ steps.git-tag.outputs.tag-created }}"
          Write-Output "GitHub Release Criada: ${{ steps.github-release.outputs.id != '' }}"
          Write-Output "=================="
          if ("${{ steps.shorebird-release.outputs.release-created }}" -ne "true") {
            Write-Error "A CRIAÇÃO DA RELEASE FALHOU. Verifique os logs acima para detalhes."
          } else {
            Write-Host "RELEASE CONCLUÍDA COM SUCESSO!" -ForegroundColor Green
          }