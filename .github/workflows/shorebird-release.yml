name: Shorebird Release

on:
  workflow_call:
    inputs:
      version:
        description: "VersÃ£o da release"
        required: true
        type: string
      release_notes:
        description: "Notas da release"
        required: true
        type: string
    outputs:
      release-created:
        description: "Release foi criada"
        value: ${{ jobs.create-release.outputs.release-created }}
      tag-created:
        description: "Tag foi criada"
        value: ${{ jobs.create-release.outputs.tag-created }}
      github-release-created:
        description: "GitHub release foi criada"
        value: ${{ jobs.create-release.outputs.github-release-created }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      release-created: ${{ steps.shorebird-release.outputs.success }}
      tag-created: ${{ steps.git-tag.outputs.tag-created }}
      github-release-created: ${{ steps.github-release.outputs.github-release-created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Create Shorebird Release
        id: shorebird-release
        uses: shorebirdtech/shorebird-release@v0
        with:
          platform: windows
          args: "--verbose"

      - name: Create Git Tag
        id: git-tag
        if: steps.shorebird-release.outputs.success == 'true'
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $tag = "v$version"
          
          Write-Host "Creating Git tag: $tag"
          
          try {
            # Configure Git
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action Bot"
            
            # Check if tag already exists
            $existingTag = git tag -l $tag
            
            if ($existingTag) {
              Write-Host "Tag $tag already exists, removing..."
              git tag -d $tag 2>$null
              git push origin --delete $tag 2>$null
            }
            
            # Create new tag
            $tagMessage = "Release $tag - Auto-generated by Shorebird Pipeline"
            git tag -a $tag -m $tagMessage
            git push origin $tag
            
            Write-Host "Git tag created successfully: $tag"
            echo "tag-created=true" >> $env:GITHUB_OUTPUT
            
          } catch {
            Write-Host "Error creating git tag: $_"
            echo "tag-created=false" >> $env:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: github-release
        if: steps.shorebird-release.outputs.success == 'true'
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $tag = "v$version"
          $releaseNotes = @"
          ${{ inputs.release_notes }}
          "@
          
          Write-Host "Creating GitHub Release for $tag"
          
          try {
            # Prepare release body
            $releaseBody = @"
            # Boost SysWebLurk $version
            
            **Release automatica gerada pelo Shorebird Pipeline**
            
            $releaseNotes
            
            ## Como Atualizar
            
            ### Para Usuarios Existentes:
            1. Abra o aplicativo instalado
            2. Aguarde a deteccao automatica de atualizacoes (30-60 segundos)
            3. Aceite a atualizacao quando solicitado
            4. Aplicativo sera reiniciado com a nova versao
            
            ### Para Novos Usuarios:
            - Baixe o instalador mais recente dos assets desta release
            - Execute o instalador e siga as instrucoes
            - O aplicativo ja estara na versao mais recente
            
            ## Tecnologia
            
            Esta release utiliza **Shorebird Code Push** para atualizacoes automaticas:
            - Updates instantaneos sem reinstalacao
            - Rollback automatico em caso de problemas  
            - Atualizacoes incrementais menores
            
            ---
            
            **Gerado automaticamente em $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') UTC**
            "@
            
            # Use GitHub CLI to create release
            if (Get-Command gh -ErrorAction SilentlyContinue) {
              & gh release create $tag --title "Boost SysWebLurk $version" --notes $releaseBody --latest
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "GitHub Release created successfully!"
                echo "github-release-created=true" >> $env:GITHUB_OUTPUT
              } else {
                Write-Host "Error creating GitHub Release via CLI"
                echo "github-release-created=false" >> $env:GITHUB_OUTPUT
              }
            } else {
              Write-Host "GitHub CLI not available"
              echo "github-release-created=false" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Host "Error creating GitHub Release: $_"
            echo "github-release-created=false" >> $env:GITHUB_OUTPUT
          }

      - name: Output Results
        run: |
          Write-Host "Release creation completed!"
          Write-Host "Success: ${{ steps.shorebird-release.outputs.success }}"
          Write-Host "Git Tag: ${{ steps.git-tag.outputs.tag-created }}"
          Write-Host "GitHub Release: ${{ steps.github-release.outputs.github-release-created }}"
          
          if ("${{ steps.shorebird-release.outputs.success }}" -eq "true") {
            Write-Host ""
            Write-Host "RELEASE CRIADA COM SUCESSO!"
            Write-Host "=========================="
            Write-Host "Versao: ${{ inputs.version }}"
            Write-Host ""
            Write-Host "Proximos passos:"
            Write-Host "1. Release base disponivel no Shorebird"
            Write-Host "2. Patches futuros serao baseados nesta release"
            Write-Host "3. Usuarios podem receber atualizacoes automaticas"
            Write-Host "4. Monitorar logs de atualizacao dos usuarios"
            Write-Host ""
            Write-Host "Para distribuir aos usuarios:"
            Write-Host "- Publique os artefatos gerados na app store apropriada"
            Write-Host "- Ou distribua diretamente se usando side-loading"
            Write-Host ""
          } else {
            Write-Host ""
            Write-Host "FALHA NA CRIACAO DA RELEASE"
            Write-Host "==========================="
            Write-Host "Verifique os logs acima para detalhes do erro."
            Write-Host ""
          }
        shell: powershell