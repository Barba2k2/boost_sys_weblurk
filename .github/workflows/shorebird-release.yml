name: Shorebird Release

on:
  workflow_call:
    inputs:
      version:
        description: "Versão da release"
        required: true
        type: string
      release_notes:
        description: "Notas da release"
        required: true
        type: string
    outputs:
      release-created:
        description: "Release foi criada"
        value: ${{ jobs.create-release.outputs.release-created }}
      version-updated:
        description: "Versão foi atualizada no pubspec.yaml"
        value: ${{ jobs.create-release.outputs.version-updated }}
      changelog-updated:
        description: "CHANGELOG.md foi atualizado"
        value: ${{ jobs.create-release.outputs.changelog-updated }}
      tag-created:
        description: "Tag foi criada"
        value: ${{ jobs.create-release.outputs.tag-created }}
      github-release-created:
        description: "GitHub release foi criada"
        value: ${{ jobs.create-release.outputs.github-release-created }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      release-created: ${{ steps.shorebird-release.outputs.release-created }}
      version-updated: ${{ steps.update-version.outputs.version-updated }}
      changelog-updated: ${{ steps.update-changelog.outputs.changelog-updated }}
      tag-created: ${{ steps.git-tag.outputs.tag-created }}
      github-release-created: ${{ steps.github-release.outputs.github-release-created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Verify Shorebird Configuration
        shell: powershell
        run: |
          Write-Output "Verificando configuracao do Shorebird..."

          try {
            # Verificar versão
            $shorebirdVersion = shorebird --version
            Write-Output "Shorebird versao: $shorebirdVersion"
            
            # Verificar configuração do app
            Write-Output "Verificando configuracao do app..."
            
            # Listar releases existentes
            Write-Output "Releases existentes:"
            $releases = shorebird releases list 2>$null
            
            if ($releases -and $releases.Length -gt 0) {
              $releases | head -5 | Write-Output
            } else {
              Write-Output "Nenhuma release encontrada ou erro ao listar"
            }
            
          } catch {
            Write-Output "Erro na verificacao do Shorebird: $_"
            throw "Configuracao do Shorebird invalida"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Install Dependencies
        shell: powershell
        run: |
          Write-Output "Instalando dependencias Flutter..."

          try {
            flutter pub get
            Write-Output "Dependencias instaladas com sucesso"
            
            # Análise de código
            flutter analyze --no-fatal-warnings
            Write-Output "Analise de codigo concluida"
            
          } catch {
            Write-Output "Aviso durante instalacao de dependencias: $_"
            # Continuar mesmo com warnings
          }

      - name: Validate Release
        id: validate-release
        shell: powershell
        run: |
          Write-Output "Validacao pre-release..."

          $version = "${{ inputs.version }}"

          try {
            # Verificar se a release já existe
            $existingReleases = shorebird releases list 2>$null
            
            if ($existingReleases -and $existingReleases.Length -gt 0) {
              $releaseExists = $existingReleases | Select-String $version
              
              if ($releaseExists) {
                Write-Output "Release $version ja existe no Shorebird"
                Write-Output "Release existente:"
                $releaseExists | Write-Output
                throw "Release $version ja existe"
              } else {
                Write-Output "Versao $version e unica"
              }
            } else {
              Write-Output "Primeira release do projeto"
            }
            
          } catch {
            if ($_.Exception.Message -like "*ja existe*") {
              throw $_
            } else {
              Write-Output "Nao foi possivel verificar releases existentes: $_"
              Write-Output "Continuando com a criacao..."
            }
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Create Shorebird Release
        id: shorebird-release
        shell: powershell
        run: |
          Write-Output "Criando release Shorebird para Windows..."

          $version = "${{ inputs.version }}"
          $changeType = "${{ inputs.change_type }}"

          Write-Output "Parametros:"
          Write-Output "  Versao: $version"
          Write-Output "  Tipo: $changeType"

          try {
            # Criar release com verbose para debug
            Write-Output "Output da criacao da release:"
            $releaseOutput = shorebird release windows --verbose 2>&1
            $releaseOutput | Write-Output
            
            # Verificar sucesso
            if ($LASTEXITCODE -eq 0) {
              Write-Output "Release Shorebird criada com sucesso!"
              echo "release-created=true" >> $env:GITHUB_OUTPUT
              
            # Listar releases para confirmar
            Write-Output "Releases atuais:"
            $currentReleases = shorebird releases list 2>$null
            if ($currentReleases -and $currentReleases.Length -gt 0) {
              $currentReleases | head -3
            } else {
              Write-Output "Nenhuma release encontrada"
            }
              
            } else {
              Write-Output "Falha na criacao da release (Exit code: $LASTEXITCODE)"
              echo "release-created=false" >> $env:GITHUB_OUTPUT
              throw "Falha na criacao da release Shorebird"
            }
            
          } catch {
            Write-Output "Erro durante criacao da release: $_"
            echo "release-created=false" >> $env:GITHUB_OUTPUT
            
            # Tentar diagnóstico adicional
            try {
              Write-Output "Diagnostico adicional:"
              shorebird doctor 2>$null
            } catch {
              Write-Output "Nao foi possivel executar diagnostico"
            }
            
            throw "Falha na criacao da release Shorebird"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Update Version in pubspec.yaml
        id: update-version
        shell: powershell
        if: steps.shorebird-release.outputs.release-created == 'true'
        run: |
          Write-Output "Atualizando versao no pubspec.yaml..."

          $version = "${{ inputs.version }}"
          $pubspecPath = "pubspec.yaml"

          try {
            # Ler o arquivo pubspec.yaml
            $pubspecContent = Get-Content $pubspecPath -Raw
            
            # Atualizar a versão usando regex
            $newContent = $pubspecContent -replace 'version:\s*\d+\.\d+\.\d+\+\d+', "version: $version"
            
            # Verificar se a substituição foi feita
            if ($newContent -eq $pubspecContent) {
              Write-Output "Aviso: Versao nao foi alterada no pubspec.yaml"
            } else {
              # Salvar o arquivo atualizado
              Set-Content -Path $pubspecPath -Value $newContent -NoNewline
              Write-Output "Versao atualizada no pubspec.yaml para: $version"
              
              # Commit da alteração
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add $pubspecPath
              git commit -m "chore: update version to $version after successful Shorebird release"
              git push
              
              echo "version-updated=true" >> $env:GITHUB_OUTPUT
              echo "new-version=$version" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Output "Erro ao atualizar versao no pubspec.yaml: $_"
            echo "version-updated=false" >> $env:GITHUB_OUTPUT
            echo "new-version=failed" >> $env:GITHUB_OUTPUT
            # Não falhar o workflow por erro na atualização da versão
          }

      - name: Update CHANGELOG.md
        id: update-changelog
        shell: powershell
        if: steps.shorebird-release.outputs.release-created == 'true'
        run: |
          Write-Output "Atualizando CHANGELOG.md..."

          $newVersion = "${{ inputs.version }}"
          $date = Get-Date -Format "yyyy-MM-dd"
          $releaseNotes = "### Mudancas nesta versao"

          try {
            $changelogEntry = "## [$newVersion] - $date`n`n$releaseNotes`n"
            
            if (Test-Path "CHANGELOG.md") {
              Write-Output "CHANGELOG.md encontrado, atualizando..."
              $existingChangelog = Get-Content "CHANGELOG.md" -Raw -ErrorAction Stop
              
              if ($existingChangelog -like "*# Changelog*") {
                $newChangelog = $existingChangelog -replace "(# Changelog)", "`$1`n$changelogEntry"
              } else {
                $newChangelog = "# Changelog`n`n$changelogEntry$existingChangelog"
              }
            } else {
              Write-Output "Criando novo CHANGELOG.md..."
              $header = "# Changelog`n`nTodas as mudancas importantes do projeto sao documentadas neste arquivo.`n`nO formato e baseado em [Keep a Changelog](https://keepachangelog.com/),`ne este projeto adere ao [Semantic Versioning](https://semver.org/).`n"
              $newChangelog = "$header$changelogEntry"
            }
            
            Set-Content "CHANGELOG.md" $newChangelog -Encoding UTF8
            
            $changelogModified = git diff --name-only CHANGELOG.md
            
            if ($changelogModified) {
              Write-Output "CHANGELOG.md atualizado com sucesso"
              echo "changelog-updated=true" >> $env:GITHUB_OUTPUT
              
              Write-Output "Nova entrada adicionada:"
              Write-Output $changelogEntry
              
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add CHANGELOG.md
              git commit -m "docs: update changelog for version $newVersion"
              git push
            } else {
              Write-Output "CHANGELOG.md nao foi modificado"
              echo "changelog-updated=false" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Output "Erro ao atualizar CHANGELOG.md: $_"
            echo "changelog-updated=false" >> $env:GITHUB_OUTPUT
          }

      - name: Create Git Tag
        id: git-tag
        shell: powershell
        run: |
          Write-Output "Criando tag Git: $tag"

          $version = "${{ inputs.version }}"
          $tag = "v$version"

          try {
            # Verificar se a tag já existe
            $existingTag = git tag -l $tag
            
            if ($existingTag) {
              Write-Output "Tag $tag ja existe"
              Write-Output "Removendo tag existente..."
              git tag -d $tag
              git push origin :refs/tags/$tag 2>$null
            }
            
            # Criar nova tag
            git tag -a $tag -m "Release $version"
            Write-Output "Tag local criada: $tag"
            
            # Enviar tag para repositório remoto
            git push origin $tag
            Write-Output "Tag enviada para repositorio remoto"
            
            echo "tag-created=true" >> $env:GITHUB_OUTPUT
            echo "tag-name=$tag" >> $env:GITHUB_OUTPUT
            
          } catch {
            Write-Output "Erro na criacao da tag: $_"
            echo "tag-created=false" >> $env:GITHUB_OUTPUT
            echo "tag-name=failed" >> $env:GITHUB_OUTPUT
            Write-Output "Continuando sem tag Git..."
          }

      - name: Create GitHub Release
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $tag = "v$version"
          $releaseNotes = "# Boost SysWebLurk $version`n`n## Como Atualizar`n`n**Para usuarios com versao anterior:**`n1. Abra o aplicativo instalado`n2. Aguarde a deteccao automatica de atualizacao`n3. Aceite a atualizacao quando solicitado`n4. Aplicativo sera reiniciado com a nova versao`n`n**Para novos usuarios:**`n- Execute o instalador e siga as instrucoes`n- O aplicativo ja estara na versao mais recente`n`n## Tecnologia`n`n- **Shorebird:** Atualizacoes automaticas sem reinstalacao`n- **Rollback automatico:** Em caso de problemas`n- **Atualizacoes incrementais:** Menores e mais rapidas`n`n---`n`n**Pipeline:** Shorebird Release Automation`n**Plataforma:** Windows x64`n**Versao anterior:** Verificar CHANGELOG.md para detalhes"

          try {
            # Tentar usar GitHub CLI se disponível
            $ghVersion = gh --version 2>$null
            
            if ($ghVersion) {
              Write-Output "GitHub CLI encontrado, criando release..."
              gh release create $tag --title "Boost SysWebLurk $version" --notes "$releaseNotes" --draft=false
              Write-Output "GitHub Release criada com sucesso!"
            } else {
              Write-Output "GitHub CLI nao disponivel"
              Write-Output "GitHub Release nao criada automaticamente"
              Write-Output "Crie manualmente em: https://github.com/${{ github.repository }}/releases/new"
            }
            
          } catch {
            Write-Output "Erro na criacao do GitHub Release: $_"
            Write-Output "Continuando sem GitHub Release..."
          }

      - name: Validate Release
        shell: powershell
        run: |
          Write-Output "Validacao pos-release..."

          $version = "${{ inputs.version }}"

          try {
            # Verificar se a release aparece na lista
            Write-Output "Verificando releases no Shorebird..."
            
            $releases = shorebird releases list 2>$null
            
            if ($releases -and $releases.Length -gt 0) {
              $releaseFound = $releases | Select-String $version
              
              if ($releaseFound) {
                Write-Output "Release $version confirmada no Shorebird"
                Write-Output "Detalhes da release:"
                $releaseFound | Write-Output
              } else {
                Write-Output "Release $version nao encontrada na lista"
              }
            } else {
              Write-Output "Nao foi possivel validar releases"
            }
            
            # Verificar patches disponíveis
            Write-Output "Patches disponiveis para esta release:"
            try {
              $patchesForRelease = shorebird patches list --release-version=$version 2>$null
              if ($patchesForRelease -and $patchesForRelease.Length -gt 0) {
                $patchesForRelease | head -3
              } else {
                Write-Output "Nenhum patch ainda para esta release (esperado)"
              }
            } catch {
              Write-Output "Nenhum patch ainda para esta release (esperado)"
            }
            
          } catch {
            Write-Output "Erro na validacao pos-release: $_"
            # Não falhar por erro de validação
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "RESUMO DA RELEASE"
          Write-Output "=================="
          Write-Output "Versao: ${{ inputs.version }}"
          Write-Output "Shorebird Release: ${{ steps.shorebird-release.outputs.release-created }}"
          Write-Output "Versao atualizada no pubspec: ${{ steps.update-version.outputs.version-updated }}"
          Write-Output "CHANGELOG atualizado: ${{ steps.update-changelog.outputs.changelog-updated }}"
          Write-Output "Git Tag: ${{ steps.git-tag.outputs.tag-created }}"
          Write-Output "Tipo: ${{ inputs.change_type }}"
          Write-Output "=================="

          if ("${{ steps.shorebird-release.outputs.release-created }}" -eq "true") {
            Write-Output ""
            Write-Output "RELEASE CRIADA COM SUCESSO!"
            Write-Output ""
            Write-Output "Proximos passos:"
            Write-Output "  1. Release base disponivel no Shorebird"
            Write-Output "  2. Versao atualizada no pubspec.yaml"
            Write-Output "  3. CHANGELOG.md atualizado com as mudancas"
            Write-Output "  4. Patches futuros serao baseados nesta release"
            Write-Output "  5. Usuarios podem receber atualizacoes automaticas"
            Write-Output "  6. Monitorar logs de atualizacao dos usuarios"
            Write-Output ""
          } else {
            Write-Output ""
            Write-Output "FALHA NA CRIAÇÃO DA RELEASE"
            Write-Output "Verifique logs acima para detalhes do erro"
            Write-Output "Versao no pubspec.yaml nao foi alterada"
            Write-Output "CHANGELOG.md nao foi atualizado"
            Write-Output ""
          }
