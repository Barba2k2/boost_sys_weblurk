name: Shorebird Release

on:
  workflow_call:
    inputs:
      version:
        description: "Versão da release"
        required: true
        type: string
      release_notes:
        description: "Notas da release"
        required: true
        type: string
    outputs:
      release-created:
        description: "Release foi criada"
        value: ${{ jobs.create-release.outputs.release-created }}
      tag-created:
        description: "Tag foi criada"
        value: ${{ jobs.create-release.outputs.tag-created }}
      github-release-created:
        description: "GitHub release foi criada"
        value: ${{ jobs.create-release.outputs.github-release-created }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      release-created: ${{ steps.shorebird-release.outputs.release-created }}
      tag-created: ${{ steps.git-tag.outputs.tag-created }}
      github-release-created: ${{ steps.github-release.outputs.github-release-created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Verify Shorebird Configuration
        shell: powershell
        run: |
          Write-Output "🔍 Verificando configuração do Shorebird..."
          
          try {
            # Verificar versão
            $shorebirdVersion = shorebird --version
            Write-Output "✅ Shorebird versão: $shorebirdVersion"
            
            # Verificar configuração do app
            Write-Output "📋 Verificando configuração do app..."
            shorebird apps list
            
            # Verificar releases existentes
            Write-Output "📋 Releases existentes:"
            try {
              shorebird releases list | head -10
            } catch {
              Write-Output "ℹ️ Nenhuma release encontrada ou erro ao listar"
            }
            
          } catch {
            Write-Output "❌ Erro na verificação do Shorebird: $_"
            throw "Configuração do Shorebird inválida"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Install Dependencies
        shell: powershell
        run: |
          Write-Output "📦 Instalando dependências Flutter..."
          
          try {
            flutter pub get
            Write-Output "✅ Dependências instaladas com sucesso"
            
            # Verificar se há problemas
            flutter analyze --no-fatal-infos --no-fatal-warnings
            Write-Output "✅ Análise de código concluída"
            
          } catch {
            Write-Output "⚠️ Aviso durante instalação de dependências: $_"
            # Não falhar a pipeline por warnings menores
          }

      - name: Pre-Release Validation
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          
          Write-Output "🔍 Validação pré-release..."
          Write-Output "  Versão: $version"
          
          # Verificar se a versão já existe
          try {
            $existingReleases = shorebird releases list --json 2>$null
            
            if ($existingReleases) {
              $releases = $existingReleases | ConvertFrom-Json
              $existingVersion = $releases | Where-Object { $_.version -eq $version }
              
              if ($existingVersion) {
                Write-Output "⚠️ Release $version já existe no Shorebird"
                Write-Output "📋 Release existente:"
                $existingVersion | ConvertTo-Json -Depth 2 | Write-Output
                throw "Release $version já existe"
              } else {
                Write-Output "✅ Versão $version é única"
              }
            } else {
              Write-Output "✅ Primeira release do projeto"
            }
          } catch {
            if ($_.Exception.Message -like "*já existe*") {
              throw
            }
            Write-Output "⚠️ Não foi possível verificar releases existentes: $_"
            Write-Output "🔄 Continuando com a criação..."
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Create Shorebird Release
        id: shorebird-release
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          
          Write-Output "🚀 Criando release Shorebird para Windows..."
          Write-Output "  Versão: $version"
          Write-Output "  Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          try {
            # Criar release com verbose para debug
            $releaseOutput = shorebird release windows --verbose 2>&1
            
            Write-Output "📋 Output da criação da release:"
            $releaseOutput | Write-Output
            
            # Verificar se a release foi criada com sucesso
            if ($LASTEXITCODE -eq 0) {
              Write-Output "✅ Release Shorebird criada com sucesso!"
              echo "release-created=true" >> $env:GITHUB_OUTPUT
              
              # Listar releases para confirmação
              Write-Output "📋 Releases atuais:"
              shorebird releases list | head -5
              
            } else {
              Write-Output "❌ Falha na criação da release (Exit code: $LASTEXITCODE)"
              echo "release-created=false" >> $env:GITHUB_OUTPUT
              throw "Shorebird release falhou"
            }
            
          } catch {
            Write-Output "❌ Erro durante criação da release: $_"
            echo "release-created=false" >> $env:GITHUB_OUTPUT
            
            # Tentar obter mais informações sobre o erro
            try {
              Write-Output "🔍 Diagnóstico adicional:"
              shorebird doctor
            } catch {
              Write-Output "⚠️ Não foi possível executar diagnóstico"
            }
            
            throw "Falha na criação da release Shorebird"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Create Git Tag
        id: git-tag
        if: steps.shorebird-release.outputs.release-created == 'true'
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $tag = "v$version"
          
          Write-Output "🏷️ Criando tag Git: $tag"
          
          try {
            # Configurar Git
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action Bot"
            
            # Verificar se tag já existe
            $existingTag = git tag -l $tag
            
            if ($existingTag) {
              Write-Output "⚠️ Tag $tag já existe"
              Write-Output "🗑️ Removendo tag existente..."
              
              # Remover tag local e remota
              git tag -d $tag 2>$null
              git push origin --delete $tag 2>$null
            }
            
            # Criar nova tag
            $tagMessage = "Release $tag - Auto-generated by Shorebird Pipeline"
            git tag -a $tag -m $tagMessage
            
            Write-Output "✅ Tag local criada: $tag"
            
            # Push da tag
            git push origin $tag
            
            Write-Output "✅ Tag enviada para repositório remoto"
            echo "tag-created=true" >> $env:GITHUB_OUTPUT
            
          } catch {
            Write-Output "❌ Erro na criação da tag: $_"
            echo "tag-created=false" >> $env:GITHUB_OUTPUT
            
            # Não falhar a pipeline apenas por erro na tag
            Write-Output "⚠️ Continuando sem tag Git..."
          }

      - name: Create GitHub Release
        id: github-release
        if: steps.shorebird-release.outputs.release-created == 'true'
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $tag = "v$version"
          $releaseNotes = @"
          ${{ inputs.release_notes }}
          "@
          
          Write-Output "📝 Criando GitHub Release..."
          Write-Output "  Tag: $tag"
          Write-Output "  Versão: $version"
          
          try {
            # Preparar corpo da release
            $releaseBody = @"
            # 🚀 Boost SysWebLurk $version
            
            **Release automática gerada pelo Shorebird Pipeline**
            
            $releaseNotes
            
            ## 📦 Como Atualizar
            
            ### Para Usuários Existentes:
            1. 🔄 Abra o aplicativo instalado
            2. ⏳ Aguarde a detecção automática de atualizações (30-60 segundos)
            3. ✅ Aceite a atualização quando solicitado
            4. 🎉 Aplicativo será reiniciado com a nova versão
            
            ### Para Novos Usuários:
            - 📥 Baixe o instalador mais recente dos assets desta release
            - 🔧 Execute o instalador e siga as instruções
            - 🚀 O aplicativo já estará na versão mais recente
            
            ## 🔧 Tecnologia
            
            Esta release utiliza **Shorebird Code Push** para atualizações automáticas:
            - ⚡ Updates instantâneos sem reinstalação
            - 🛡️ Rollback automático em caso de problemas  
            - 📊 Atualizações incrementais menores
            
            ---
            
            **🤖 Gerado automaticamente em $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') UTC**
            
            **📋 Pipeline:** Shorebird Release Automation  
            **🔧 Plataforma:** Windows x64  
            **📱 Versão anterior:** Verificar CHANGELOG.md para detalhes
            "@
            
            # Usar GitHub CLI para criar release (mais confiável que API direta)
            $releaseArgs = @(
              "release", "create", $tag,
              "--title", "Boost SysWebLurk $version",
              "--notes", $releaseBody,
              "--latest"
            )
            
            # Verificar se GitHub CLI está disponível
            if (Get-Command gh -ErrorAction SilentlyContinue) {
              Write-Output "✅ GitHub CLI encontrado, criando release..."
              
              & gh @releaseArgs
              
              if ($LASTEXITCODE -eq 0) {
                Write-Output "✅ GitHub Release criada com sucesso!"
                echo "github-release-created=true" >> $env:GITHUB_OUTPUT
              } else {
                Write-Output "❌ Erro ao criar GitHub Release via CLI"
                echo "github-release-created=false" >> $env:GITHUB_OUTPUT
              }
              
            } else {
              Write-Output "⚠️ GitHub CLI não disponível"
              Write-Output "📝 Release notes preparadas:"
              Write-Output $releaseBody
              echo "github-release-created=false" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Output "❌ Erro na criação do GitHub Release: $_"
            echo "github-release-created=false" >> $env:GITHUB_OUTPUT
            
            # Não falhar a pipeline apenas por erro no GitHub Release
            Write-Output "⚠️ Continuando sem GitHub Release..."
          }

      - name: Post-Release Validation
        if: steps.shorebird-release.outputs.release-created == 'true'
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          
          Write-Output "🔍 Validação pós-release..."
          
          try {
            # Verificar se a release aparece na lista
            $releases = shorebird releases list --json 2>$null
            
            if ($releases) {
              $releasesList = $releases | ConvertFrom-Json
              $createdRelease = $releasesList | Where-Object { $_.version -eq $version }
              
              if ($createdRelease) {
                Write-Output "✅ Release $version confirmada no Shorebird"
                Write-Output "📋 Detalhes da release:"
                $createdRelease | ConvertTo-Json -Depth 2 | Write-Output
              } else {
                Write-Output "⚠️ Release $version não encontrada na lista"
              }
            } else {
              Write-Output "⚠️ Não foi possível validar releases"
            }
            
            # Verificar patches disponíveis para esta release
            Write-Output "📋 Patches disponíveis para esta release:"
            try {
              shorebird patches list --release-version=$version 2>$null
            } catch {
              Write-Output "ℹ️ Nenhum patch ainda para esta release (esperado)"
            }
            
          } catch {
            Write-Output "⚠️ Erro na validação pós-release: $_"
            # Não falhar por erro de validação
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "📋 RESUMO DA RELEASE"
          Write-Output "==================="
          Write-Output "🚀 Versão: ${{ inputs.version }}"
          Write-Output "📦 Shorebird Release: ${{ steps.shorebird-release.outputs.release-created }}"
          Write-Output "🏷️ Git Tag: ${{ steps.git-tag.outputs.tag-created }}"
          Write-Output "📝 GitHub Release: ${{ steps.github-release.outputs.github-release-created }}"
          Write-Output "⏰ Concluído em: $(Get-Date -Format 'HH:mm:ss')"
          Write-Output "==================="
          
          if ("${{ steps.shorebird-release.outputs.release-created }}" -eq "true") {
            Write-Output ""
            Write-Output "🎉 RELEASE CRIADA COM SUCESSO!"
            Write-Output ""
            Write-Output "📋 Próximos passos:"
            Write-Output "  1. ✅ Release base disponível no Shorebird"
            Write-Output "  2. 🔧 Patches futuros serão baseados nesta release"
            Write-Output "  3. 📱 Usuários podem receber atualizações automáticas"
            Write-Output "  4. 🔍 Monitorar logs de atualização dos usuários"
            Write-Output ""
          } else {
            Write-Output ""
            Write-Output "❌ FALHA NA CRIAÇÃO DA RELEASE"
            Write-Output "⚠️ Verifique logs acima para detalhes do erro"
            Write-Output ""
          }