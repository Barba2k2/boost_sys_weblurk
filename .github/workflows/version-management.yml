name: Version Management

on:
  workflow_call:
    inputs:
      current_version:
        description: "Vers√£o atual"
        required: true
        type: string
      new_version:
        description: "Nova vers√£o"
        required: true
        type: string
      change_type:
        description: "Tipo de mudan√ßa"
        required: true
        type: string
      release_notes:
        description: "Notas da release"
        required: true
        type: string
    outputs:
      version-updated:
        description: "Vers√£o foi atualizada"
        value: ${{ jobs.update-version.outputs.version-updated }}
      changelog-updated:
        description: "Changelog foi atualizado"
        value: ${{ jobs.update-version.outputs.changelog-updated }}
    secrets:
      GITHUB_TOKEN:
        required: true

jobs:
  update-version:
    runs-on: windows-latest
    outputs:
      version-updated: ${{ steps.update-pubspec.outputs.version-updated }}
      changelog-updated: ${{ steps.update-changelog.outputs.changelog-updated }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        shell: powershell
        run: |
          Write-Output "‚öôÔ∏è Configurando Git para commits autom√°ticos..."
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Bot"
          git config --global core.longpaths true

      - name: Update pubspec.yaml
        id: update-pubspec
        shell: powershell
        run: |
          $currentVersion = "${{ inputs.current_version }}"
          $newVersion = "${{ inputs.new_version }}"
          
          Write-Output "üìù Atualizando pubspec.yaml..."
          Write-Output "  De: $currentVersion"
          Write-Output "  Para: $newVersion"
          
          try {
            # Ler conte√∫do atual
            $pubspecContent = Get-Content pubspec.yaml -Raw -ErrorAction Stop
            
            # Fazer backup
            $backupContent = $pubspecContent
            
            # Atualizar vers√£o
            $updatedContent = $pubspecContent -replace "version:\s*.+", "version: $newVersion"
            
            # Verificar se houve mudan√ßa
            if ($pubspecContent -eq $updatedContent) {
              Write-Output "‚ÑπÔ∏è Nenhuma mudan√ßa necess√°ria no pubspec.yaml"
              echo "version-updated=false" >> $env:GITHUB_OUTPUT
              return
            }
            
            # Salvar arquivo atualizado
            Set-Content pubspec.yaml $updatedContent -Encoding UTF8
            
            # Verificar se arquivo foi realmente modificado
            $hasChanges = git diff --name-only pubspec.yaml
            
            if ($hasChanges) {
              Write-Output "‚úÖ pubspec.yaml atualizado com sucesso"
              echo "version-updated=true" >> $env:GITHUB_OUTPUT
              
              # Mostrar diff para debug
              Write-Output "üìã Mudan√ßas realizadas:"
              git diff pubspec.yaml | Write-Output
            } else {
              Write-Output "‚ö†Ô∏è Arquivo n√£o foi modificado pelo Git"
              echo "version-updated=false" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Output "‚ùå Erro ao atualizar pubspec.yaml: $_"
            
            # Restaurar backup se houver erro
            if ($backupContent) {
              Set-Content pubspec.yaml $backupContent -Encoding UTF8
              Write-Output "‚Ü©Ô∏è Backup restaurado"
            }
            
            echo "version-updated=false" >> $env:GITHUB_OUTPUT
            throw "Falha na atualiza√ß√£o do pubspec.yaml"
          }

      - name: Update CHANGELOG.md
        id: update-changelog
        shell: powershell
        run: |
          $newVersion = "${{ inputs.new_version }}"
          $changeType = "${{ inputs.change_type }}"
          $releaseNotes = @"
          ${{ inputs.release_notes }}
          "@
          
          Write-Output "üìù Atualizando CHANGELOG.md..."
          
          try {
            $date = Get-Date -Format "yyyy-MM-dd"
            $changeTypeEmoji = switch ($changeType) {
              "major" { "üí•" }
              "minor" { "‚ú®" }
              "patch" { "üêõ" }
              default { "üìù" }
            }
            
            # Criar entrada do changelog
            $changelogEntry = @"
            
            ## [$changeTypeEmoji $newVersion] - $date
            
            $releaseNotes
            
            "@
            
            # Verificar se CHANGELOG.md existe
            if (Test-Path "CHANGELOG.md") {
              Write-Output "üìã CHANGELOG.md encontrado, atualizando..."
              
              $existingChangelog = Get-Content "CHANGELOG.md" -Raw -ErrorAction Stop
              
              # Inserir nova entrada ap√≥s o cabe√ßalho
              if ($existingChangelog -like "*# Changelog*") {
                $newChangelog = $existingChangelog -replace "(# Changelog)", "`$1$changelogEntry"
              } else {
                $newChangelog = "# Changelog$changelogEntry$existingChangelog"
              }
            } else {
              Write-Output "üìã Criando novo CHANGELOG.md..."
              
              $newChangelog = @"
              # Changelog
              
              Todas as mudan√ßas importantes do projeto s√£o documentadas neste arquivo.
              
              O formato √© baseado em [Keep a Changelog](https://keepachangelog.com/),
              e este projeto adere ao [Semantic Versioning](https://semver.org/).
              $changelogEntry
              "@
            }
            
            # Salvar changelog atualizado
            Set-Content "CHANGELOG.md" $newChangelog -Encoding UTF8
            
            # Verificar se foi modificado
            $changelogModified = git diff --name-only CHANGELOG.md
            
            if ($changelogModified) {
              Write-Output "‚úÖ CHANGELOG.md atualizado com sucesso"
              echo "changelog-updated=true" >> $env:GITHUB_OUTPUT
              
              # Mostrar preview da entrada adicionada
              Write-Output "üìã Nova entrada adicionada:"
              Write-Output $changelogEntry
            } else {
              Write-Output "‚ÑπÔ∏è CHANGELOG.md n√£o foi modificado"
              echo "changelog-updated=false" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Output "‚ùå Erro ao atualizar CHANGELOG.md: $_"
            echo "changelog-updated=false" >> $env:GITHUB_OUTPUT
            # N√£o falhar a pipeline por erro no changelog
          }

      - name: Commit Version Changes
        if: steps.update-pubspec.outputs.version-updated == 'true'
        shell: powershell
        run: |
          $newVersion = "${{ inputs.new_version }}"
          $changeType = "${{ inputs.change_type }}"
          
          Write-Output "üíæ Fazendo commit das mudan√ßas de vers√£o..."
          
          try {
            # Adicionar arquivos modificados
            git add pubspec.yaml
            
            if ("${{ steps.update-changelog.outputs.changelog-updated }}" -eq "true") {
              git add CHANGELOG.md
              Write-Output "üìã CHANGELOG.md inclu√≠do no commit"
            }
            
            # Verificar se h√° mudan√ßas para commitar
            $stagedChanges = git diff --cached --name-only
            
            if (-not $stagedChanges) {
              Write-Output "‚ÑπÔ∏è Nenhuma mudan√ßa para commitar"
              return
            }
            
            Write-Output "üìã Arquivos que ser√£o commitados:"
            $stagedChanges | ForEach-Object { Write-Output "  - $_" }
            
            # Fazer commit com mensagem apropriada
            $commitMessage = "chore: bump version to $newVersion [$changeType] [skip ci]"
            git commit -m $commitMessage
            
            Write-Output "‚úÖ Commit realizado: $commitMessage"
            
            # Push das mudan√ßas
            Write-Output "üì§ Enviando mudan√ßas para reposit√≥rio remoto..."
            git push origin HEAD
            
            Write-Output "‚úÖ Mudan√ßas enviadas com sucesso"
            
          } catch {
            Write-Output "‚ùå Erro no commit/push: $_"
            
            # Reset se houver erro
            git reset --hard HEAD
            Write-Output "‚Ü©Ô∏è Reset realizado devido ao erro"
            
            throw "Falha no commit das mudan√ßas de vers√£o"
          }

      - name: Validate Version Update
        if: steps.update-pubspec.outputs.version-updated == 'true'
        shell: powershell
        run: |
          $expectedVersion = "${{ inputs.new_version }}"
          
          Write-Output "üîç Validando atualiza√ß√£o de vers√£o..."
          
          try {
            # Verificar se a vers√£o foi realmente atualizada
            $pubspecContent = Get-Content pubspec.yaml -Raw
            $versionMatch = $pubspecContent | Select-String 'version:\s*(.+)'
            
            if ($versionMatch) {
              $actualVersion = $versionMatch.Matches[0].Groups[1].Value.Trim()
              
              if ($actualVersion -eq $expectedVersion) {
                Write-Output "‚úÖ Vers√£o validada com sucesso: $actualVersion"
              } else {
                Write-Output "‚ùå Vers√£o n√£o confere!"
                Write-Output "  Esperada: $expectedVersion"
                Write-Output "  Atual: $actualVersion"
                throw "Valida√ß√£o de vers√£o falhou"
              }
            } else {
              Write-Output "‚ùå N√£o foi poss√≠vel encontrar vers√£o no pubspec.yaml"
              throw "Vers√£o n√£o encontrada ap√≥s atualiza√ß√£o"
            }
            
          } catch {
            Write-Output "‚ùå Erro na valida√ß√£o: $_"
            throw "Falha na valida√ß√£o da vers√£o"
          }

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "üìã RESUMO DO VERSIONAMENTO"
          Write-Output "=========================="
          Write-Output "üì± Vers√£o: ${{ inputs.current_version }} ‚Üí ${{ inputs.new_version }}"
          Write-Output "üìù pubspec.yaml: ${{ steps.update-pubspec.outputs.version-updated }}"
          Write-Output "üìã CHANGELOG.md: ${{ steps.update-changelog.outputs.changelog-updated }}"
          Write-Output "üìä Tipo: ${{ inputs.change_type }}"
          Write-Output "=========================="
          
          if ("${{ steps.update-pubspec.outputs.version-updated }}" -eq "true") {
            Write-Output "‚úÖ Versionamento conclu√≠do com sucesso!"
          } else {
            Write-Output "‚ÑπÔ∏è Nenhuma atualiza√ß√£o de vers√£o necess√°ria"
          }