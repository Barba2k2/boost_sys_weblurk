name: Version Management

on:
  workflow_call:
    inputs:
      current_version:
        description: "Versao atual"
        required: true
        type: string
      new_version:
        description: "Nova versao"
        required: true
        type: string
      change_type:
        description: "Tipo de mudanca"
        required: true
        type: string
      release_notes:
        description: "Notas da release"
        required: true
        type: string
    outputs:
      version-updated:
        description: "Versao foi atualizada"
        value: ${{ jobs.update-version.outputs.version-updated }}
      changelog-updated:
        description: "Changelog foi atualizado"
        value: ${{ jobs.update-version.outputs.changelog-updated }}

jobs:
  update-version:
    runs-on: windows-latest
    outputs:
      version-updated: ${{ steps.update-pubspec.outputs.version-updated }}
      changelog-updated: ${{ steps.update-changelog.outputs.changelog-updated }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        shell: powershell
        run: |
          Write-Output "Configurando Git para commits automaticos..."
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Bot"
          git config --global core.longpaths true

      - name: Update pubspec.yaml
        id: update-pubspec
        shell: powershell
        run: |
          Write-Output "Atualizando pubspec.yaml..."

          $pubspecContent = Get-Content pubspec.yaml -Raw -ErrorAction Stop
          $newContent = $pubspecContent -replace 'version:\s*[\d\.]+\+\d+', "version: ${{ inputs.new_version }}"

          if ($newContent -eq $pubspecContent) {
            Write-Output "Nenhuma mudanca necessaria no pubspec.yaml"
            echo "version-updated=false" >> $env:GITHUB_OUTPUT
          } else {
            $newContent | Set-Content pubspec.yaml -NoNewline
            git add pubspec.yaml
            
            Write-Output "pubspec.yaml atualizado com sucesso"
            echo "version-updated=true" >> $env:GITHUB_OUTPUT
            
            Write-Output "Mudancas realizadas:"
            git diff --cached pubspec.yaml
          }

      - name: Update CHANGELOG.md
        id: update-changelog
        shell: powershell
        run: |
          Write-Output "Atualizando CHANGELOG.md..."

          $changeType = "${{ inputs.change_type }}"
          $icon = switch ($changeType) {
            "major" { "[MAJOR]" }
            "minor" { "[FEAT]" }
            "patch" { "[FIX]" }
            default { "[CHANGE]" }
          }

          $date = Get-Date -Format "yyyy-MM-dd"
          $newEntry = "## [${{ inputs.new_version }}] - $date`n`n$icon ${{ inputs.release_notes }}`n`n"

          if (Test-Path "CHANGELOG.md") {
            Write-Output "CHANGELOG.md encontrado, atualizando..."
            $changelogContent = Get-Content CHANGELOG.md -Raw
            $newContent = $newEntry + $changelogContent
            $newContent | Set-Content CHANGELOG.md -NoNewline
          } else {
            Write-Output "Criando novo CHANGELOG.md..."
            $header = "# Changelog`n`nTodas as mudancas notaveis neste projeto serao documentadas neste arquivo.`n`nO formato e baseado em [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),`ne este projeto adere ao [Semantic Versioning](https://semver.org/spec/v2.0.0.html).`n`n"
            $newContent = $header + $newEntry
            $newContent | Set-Content CHANGELOG.md -NoNewline
          }

          git add CHANGELOG.md

          Write-Output "CHANGELOG.md atualizado com sucesso"
          echo "changelog-updated=true" >> $env:GITHUB_OUTPUT

          Write-Output "Nova entrada adicionada:"
          git diff --cached CHANGELOG.md

      - name: Commit and Push Changes
        shell: powershell
        run: |
          $commitMessage = "chore: bump version to ${{ inputs.new_version }}"

          if (git diff --cached --quiet) {
            Write-Output "Nenhuma mudanca para commitar"
          } else {
            Write-Output "Arquivos que serao commitados:"
            git diff --cached --name-only
            
            git commit -m $commitMessage
            Write-Output "Commit realizado: $commitMessage"
            
            git push origin HEAD:${{ github.ref_name }}
            Write-Output "Mudancas enviadas com sucesso"
          }

      - name: Validate Version Update
        shell: powershell
        run: |
          Write-Output "Validando atualizacao de versao..."

          Start-Sleep -Seconds 2

          $pubspecContent = Get-Content pubspec.yaml -Raw -ErrorAction Stop
          $versionMatch = $pubspecContent | Select-String 'version:\s*(.+)'

          if ($versionMatch) {
            $actualVersion = $versionMatch.Matches[0].Groups[1].Value.Trim()
            
            if ($actualVersion -eq "${{ inputs.new_version }}") {
              Write-Output "Versao validada com sucesso: $actualVersion"
            } else {
              Write-Output "Versao nao confere!"
              Write-Output "Esperado: ${{ inputs.new_version }}"
              Write-Output "Atual: $actualVersion"
            }
          } else {
            Write-Output "Nao foi possivel encontrar versao no pubspec.yaml"
          }

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "RESUMO DO VERSIONAMENTO"
          Write-Output "======================="
          Write-Output "Versao: ${{ inputs.current_version }} â†’ ${{ inputs.new_version }}"
          Write-Output "pubspec.yaml: ${{ steps.update-pubspec.outputs.version-updated }}"
          Write-Output "CHANGELOG.md: ${{ steps.update-changelog.outputs.changelog-updated }}"
          Write-Output "Tipo: ${{ inputs.change_type }}"
          Write-Output "======================="

          if ("${{ steps.update-pubspec.outputs.version-updated }}" -eq "true" -or "${{ steps.update-changelog.outputs.changelog-updated }}" -eq "true") {
            Write-Output "Versionamento concluido com sucesso!"
          } else {
            Write-Output "Nenhuma atualizacao de versao necessaria"
          }
