name: Shorebird Pipeline

on:
  push:
    branches:
      - "main"
      - "master"
      - "1.0.14+1"
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"

  workflow_dispatch:
    inputs:
      force_action:
        description: "Forcar acao especifica"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - release
          - patch

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  auto-version-manager:
    runs-on: windows-latest
    outputs:
      action: ${{ steps.decision.outputs.action }}
      final-version: ${{ steps.auto-version.outputs.final-version }}
      version-was-updated: ${{ steps.auto-version.outputs.version-was-updated }}
      should-proceed: ${{ steps.decision.outputs.should-proceed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      # =================================================================
      # SOLUÇÃO IMPLEMENTADA AQUI
      # Esta etapa verifica a autenticação antes de qualquer outra coisa.
      # =================================================================
      - name: Verify Shorebird Authentication
        shell: powershell
        run: |
          Write-Host "Verifying Shorebird authentication..."
          shorebird apps list 2>&1 | Out-Null # Tenta um comando simples e ignora a saída

          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::FALHA DE AUTENTICAÇÃO COM O SHOREBIRD!"
            Write-Host "::error::O segredo 'SHOREBIRD_TOKEN' está inválido ou expirado."
            Write-Host "::error::Ação necessária: Gere um novo token com 'shorebird login:ci' e atualize o segredo nas configurações do repositório no GitHub."
            exit 1 # Para a pipeline imediatamente
          }

          Write-Host "Authentication successful. Proceeding with version management."

      - name: Configure Git for Long Paths
        shell: powershell
        run: |
          git config --global core.longpaths true

      - name: Auto Version Management with Correct Shorebird Commands
        id: auto-version
        shell: powershell
        run: |
          Write-Host "========================================"
          Write-Host "INICIANDO GERENCIAMENTO AUTOMATICO DE VERSAO"
          Write-Host "========================================"

          Write-Host "1. Lendo versao atual do pubspec.yaml..."
          $pubspecContent = Get-Content pubspec.yaml -Raw
          $versionMatch = $pubspecContent | Select-String 'version:\s*(.+)'
          $currentVersion = $versionMatch.Matches[0].Groups[1].Value.Trim()
          Write-Host "   Versao encontrada: $currentVersion"

          Write-Host ""
          Write-Host "2. Verificando releases existentes no Shorebird..."
          $existingReleases = shorebird releases list
          $releaseExists = $existingReleases -like "*$currentVersion*"

          $finalVersion = $currentVersion
          $versionWasUpdated = $false

          if ($releaseExists) {
            Write-Host "   ALERTA: Release $currentVersion JA EXISTE!"
            Write-Host "3. Release ja existe - calculando nova versao..."
            
            $versionParts = $currentVersion -split '\+'
            $semverPart = $versionParts[0]
            $buildPart = if ($versionParts.Length -gt 1) { [int]$versionParts[1] } else { 0 }
            
            $maxAttempts = 10
            for ($i = 1; $i -le $maxAttempts; $i++) {
              $buildPart += 1
              $candidateVersion = "$semverPart+$buildPart"
              Write-Host "   Testando versao: $candidateVersion"
              if (-not ($existingReleases -like "*$candidateVersion*")) {
                $finalVersion = $candidateVersion
                $versionWasUpdated = $true
                Write-Host "   ENCONTRADA: Versao disponivel: $finalVersion"
                break
              }
            }
          } else {
            Write-Host "   OK: Release $currentVersion nao existe ainda."
            Write-Host "3. Versao atual esta disponivel - nenhuma mudanca necessaria"
          }

          if ($versionWasUpdated) {
            Write-Host ""
            Write-Host "4. Atualizando pubspec.yaml..."
            $updatedContent = $pubspecContent -replace "version:\s*.+", "version: $finalVersion"
            Set-Content pubspec.yaml $updatedContent -Encoding UTF8
            Write-Host "   pubspec.yaml atualizado: $currentVersion -> $finalVersion"
            
            Write-Host ""
            Write-Host "5. Commitando mudancas de versao..."
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action Auto-Versioning"
            git add pubspec.yaml
            $commitMessage = "chore: auto-bump version to $finalVersion [skip ci]"
            git commit -m $commitMessage
            git push origin HEAD
            Write-Host "   Commit e Push concluidos com sucesso."
          } else {
            Write-Host ""
            Write-Host "4. Nenhuma atualizacao do pubspec.yaml necessaria"
            Write-Host "5. Nenhum commit necessario"
          }

          echo "final-version=$finalVersion" >> $env:GITHUB_OUTPUT
          echo "version-was-updated=$versionWasUpdated" >> $env:GITHUB_OUTPUT

          Write-Host "========================================"
          Write-Host "GERENCIAMENTO DE VERSAO CONCLUIDO"
          Write-Host "========================================"

      - name: Determine Action
        id: decision
        shell: powershell
        run: |
          $forceAction = "${{ github.event.inputs.force_action }}"
          $finalVersion = "${{ steps.auto-version.outputs.final-version }}"
          $versionWasUpdated = "${{ steps.auto-version.outputs.version-was-updated }}"
          $action = "patch" # Default to patch

          if ($forceAction -eq 'release' -or $forceAction -eq 'patch') {
              $action = $forceAction
          } else {
              $commits = git log --oneline -5 --format="%s"
              if ($commits | Where-Object { $_ -match "(BREAKING|!):" -or $_ -match "^feat" }) {
                  $action = "release"
              }
          }

          Write-Host "DECISAO FINAL: $action para versao $finalVersion"
          echo "action=$action" >> $env:GITHUB_OUTPUT
          echo "should-proceed=true" >> $env:GITHUB_OUTPUT

  shorebird-release:
    needs: auto-version-manager
    if: needs.auto-version-manager.outputs.action == 'release' && needs.auto-version-manager.outputs.should-proceed == 'true'
    uses: ./.github/workflows/shorebird-release.yml
    with:
      version: ${{ needs.auto-version-manager.outputs.final-version }}
      release_notes: "Release automática"
    secrets:
      SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

  shorebird-patch:
    needs: auto-version-manager
    if: needs.auto-version-manager.outputs.action == 'patch' && needs.auto-version-manager.outputs.should-proceed == 'true'
    uses: ./.github/workflows/shorebird-patch.yml
    with:
      version: ${{ needs.auto-version-manager.outputs.final-version }}
      change_type: "patch"
    secrets:
      SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
