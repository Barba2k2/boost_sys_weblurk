name: Shorebird Pipeline

on:
  push:
    branches:
      - "main"
      - "master"
      - "1.0.14+1"
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"

  workflow_dispatch:
    inputs:
      force_action:
        description: "Forcar acao especifica"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - release
          - patch

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  analyze:
    runs-on: windows-latest
    outputs:
      action: ${{ steps.decision.outputs.action }}
      version: ${{ steps.version.outputs.version }}
      should-proceed: ${{ steps.decision.outputs.should-proceed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        shell: powershell
        run: |
          try {
            $pubspecContent = Get-Content pubspec.yaml -Raw -ErrorAction Stop
            $versionMatch = $pubspecContent | Select-String 'version:\s*(.+)'
            
            if ($versionMatch) {
              $currentVersion = $versionMatch.Matches[0].Groups[1].Value.Trim()
              Write-Host "Current version: $currentVersion"
            } else {
              $currentVersion = "1.0.14+2"
              Write-Host "Version not found, using default: $currentVersion"
            }
          } catch {
            $currentVersion = "1.0.14+2"
            Write-Host "Error reading pubspec.yaml, using default: $currentVersion"
          }
          
          echo "version=$currentVersion" >> $env:GITHUB_OUTPUT

      - name: Analyze Changes and Decide Action
        id: decision
        shell: powershell
        run: |
          $forceAction = "${{ github.event.inputs.force_action }}"
          $branch = "${{ github.ref_name }}"
          
          Write-Host "Analyzing changes..."
          Write-Host "Branch: $branch"
          Write-Host "Force action: $forceAction"
          
          try {
            $commits = git log --oneline -5 --format="%s" 2>$null
            Write-Host "Recent commits:"
            $commits | ForEach-Object { Write-Host "  - $_" }
          } catch {
            Write-Host "Could not get commits"
            $commits = @()
          }
          
          if ($forceAction -eq "release") {
            $action = "release"
            Write-Host "Action forced to: release"
          } elseif ($forceAction -eq "patch") {
            $action = "patch"
            Write-Host "Action forced to: patch"
          } else {
            $hasBreaking = $commits | Where-Object { $_ -match "(BREAKING|!):" }
            $hasFeature = $commits | Where-Object { $_ -match "^feat" }
            $hasFix = $commits | Where-Object { $_ -match "^fix" }
            
            if ($hasBreaking -or $hasFeature) {
              $action = "release"
              Write-Host "Auto-detected action: release (breaking change or new feature)"
            } elseif ($hasFix) {
              $action = "patch"
              Write-Host "Auto-detected action: patch (bug fix)"
            } else {
              $action = "patch"
              Write-Host "Auto-detected action: patch (default for other changes)"
            }
          }
          
          echo "action=$action" >> $env:GITHUB_OUTPUT
          echo "should-proceed=true" >> $env:GITHUB_OUTPUT
          
          Write-Host "Final decision: $action"

  shorebird-release:
    needs: analyze
    if: needs.analyze.outputs.action == 'release' && needs.analyze.outputs.should-proceed == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Create Shorebird Release
        id: release
        uses: shorebirdtech/shorebird-release@v0
        with:
          platform: windows
          args: "--verbose"

      - name: Create Git Tag
        if: steps.release.outputs.success == 'true'
        shell: powershell
        run: |
          $version = "${{ needs.analyze.outputs.version }}"
          $tag = "v$version"
          
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Bot"
          
          try {
            git tag -a $tag -m "Release $tag - Shorebird Pipeline"
            git push origin $tag
            Write-Host "Tag created: $tag"
          } catch {
            Write-Host "Error creating tag: $_"
          }

      - name: Summary
        run: |
          if ("${{ steps.release.outputs.success }}" -eq "true") {
            Write-Host "RELEASE CRIADA COM SUCESSO!"
            Write-Host "Versao: ${{ needs.analyze.outputs.version }}"
            Write-Host "Release base disponivel para patches futuros"
          } else {
            Write-Host "FALHA NA CRIACAO DA RELEASE"
            exit 1
          }
        shell: powershell

  shorebird-patch:
    needs: analyze
    if: needs.analyze.outputs.action == 'patch' && needs.analyze.outputs.should-proceed == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Create Shorebird Patch
        id: patch
        uses: shorebirdtech/shorebird-patch@v0
        with:
          platform: windows
          args: "--verbose"

      - name: Summary
        run: |
          if ("${{ steps.patch.outputs.success }}" -eq "true") {
            Write-Host "PATCH CRIADO COM SUCESSO!"
            Write-Host "Versao: ${{ needs.analyze.outputs.version }}"
            Write-Host "Patch Number: ${{ steps.patch.outputs.patch-number }}"
            Write-Host "Patch disponivel para usuarios automaticamente"
          } else {
            Write-Host "FALHA NA CRIACAO DO PATCH"
            exit 1
          }
        shell: powershell