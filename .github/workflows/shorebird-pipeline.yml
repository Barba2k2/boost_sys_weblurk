name: Shorebird Main Pipeline

on:
  push:
    branches:
      - "1.0.14+1"
      - "main"
      - "master"
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"
  
  # Adicionar trigger manual para debug
  workflow_dispatch:
    inputs:
      force_run:
        description: "For√ßar execu√ß√£o da pipeline"
        required: false
        default: true
        type: boolean

# Adicionar permiss√µes necess√°rias
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  # Job de verifica√ß√£o inicial
  debug-trigger:
    runs-on: windows-latest
    steps:
      - name: Checkout with Full History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Debug Pipeline Trigger
        shell: powershell
        run: |
          Write-Output "üîç DEBUG: Pipeline foi disparada!"
          Write-Output "üìã Informa√ß√µes do trigger:"
          Write-Output "  Branch: ${{ github.ref_name }}"
          Write-Output "  Event: ${{ github.event_name }}"
          Write-Output "  SHA: ${{ github.sha }}"
          Write-Output "  Actor: ${{ github.actor }}"
          Write-Output "  Workflow: ${{ github.workflow }}"
          Write-Output "  Repository: ${{ github.repository }}"
          Write-Output "  Run ID: ${{ github.run_id }}"
          Write-Output "  Run Number: ${{ github.run_number }}"
          Write-Output ""
          
          # Verificar status do Git de forma mais robusta
          Write-Output "üîç Verificando contexto Git:"
          try {
            $gitDir = git rev-parse --git-dir 2>$null
            if ($LASTEXITCODE -eq 0) {
              Write-Output "  ‚úÖ Git repository detectado: $gitDir"
              
              $currentBranch = git branch --show-current 2>$null
              Write-Output "  üåü Branch atual: $currentBranch"
              
              $lastCommit = git log -1 --oneline 2>$null
              Write-Output "  üìù √öltimo commit: $lastCommit"
              
              # Tentar m√∫ltiplas formas de obter arquivos modificados
              Write-Output "üìÅ Tentativas de obter arquivos modificados:"
              
              # M√©todo 1: diff com commit anterior
              try {
                $method1 = git diff --name-only HEAD~1..HEAD 2>$null
                if ($method1) {
                  Write-Output "  ‚úÖ M√©todo 1 (HEAD~1..HEAD):"
                  $method1 | ForEach-Object { Write-Output "    - $_" }
                } else {
                  Write-Output "  ‚ö†Ô∏è M√©todo 1: Nenhum arquivo retornado"
                }
              } catch {
                Write-Output "  ‚ùå M√©todo 1 falhou: $_"
              }
              
              # M√©todo 2: show do commit atual
              try {
                $method2 = git show --name-only --format="" HEAD 2>$null
                if ($method2) {
                  Write-Output "  ‚úÖ M√©todo 2 (show HEAD):"
                  $method2 | ForEach-Object { Write-Output "    - $_" }
                } else {
                  Write-Output "  ‚ö†Ô∏è M√©todo 2: Nenhum arquivo retornado"
                }
              } catch {
                Write-Output "  ‚ùå M√©todo 2 falhou: $_"
              }
              
              # M√©todo 3: usando evento do GitHub
              Write-Output "  üìã M√©todo 3 (GitHub Event):"
              $eventFiles = "${{ github.event.commits[0].added }}" + "${{ github.event.commits[0].modified }}"
              if ($eventFiles -and $eventFiles -ne "") {
                Write-Output "    - Arquivos do evento: $eventFiles"
              } else {
                Write-Output "    - Nenhum arquivo no evento GitHub"
              }
              
            } else {
              Write-Output "  ‚ùå N√£o √© um reposit√≥rio Git v√°lido"
            }
          } catch {
            Write-Output "  ‚ùå Erro ao verificar Git: $_"
          }
          
          Write-Output ""
          Write-Output "üîê Verifica√ß√£o de secrets:"
          if ("${{ secrets.SHOREBIRD_TOKEN }}" -ne "") {
            Write-Output "  ‚úÖ SHOREBIRD_TOKEN configurado"
          } else {
            Write-Output "  ‚ùå SHOREBIRD_TOKEN N√ÉO configurado"
          }
          
          Write-Output ""
          Write-Output "üìÇ Estrutura do projeto:"
          try {
            if (Test-Path "pubspec.yaml") { Write-Output "  ‚úÖ pubspec.yaml" }
            if (Test-Path "lib") { Write-Output "  ‚úÖ lib/" }
            if (Test-Path ".github/workflows") { Write-Output "  ‚úÖ .github/workflows/" }
            
            Write-Output "  üìÅ Conte√∫do da raiz:"
            Get-ChildItem -Name | ForEach-Object { Write-Output "    - $_" }
          } catch {
            Write-Output "  ‚ùå Erro ao verificar estrutura: $_"
          }

  # Job 1: An√°lise de Mudan√ßas
  analyze:
    needs: debug-trigger
    uses: ./.github/workflows/analyze-changes.yml
    with:
      branch_name: ${{ github.ref_name }}
    secrets:
      SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

  # Job 2: Versionamento (se necess√°rio)
  versioning:
    needs: analyze
    if: needs.analyze.outputs.should-proceed == 'true'
    uses: ./.github/workflows/version-management.yml
    with:
      current_version: ${{ needs.analyze.outputs.current-version }}
      new_version: ${{ needs.analyze.outputs.new-version }}
      change_type: ${{ needs.analyze.outputs.change-type }}
      release_notes: ${{ needs.analyze.outputs.release-notes }}

  # Job 3: Shorebird Release (se for release)
  shorebird-release:
    needs: [analyze, versioning]
    if: needs.analyze.outputs.action == 'release'
    uses: ./.github/workflows/shorebird-release.yml
    with:
      version: ${{ needs.analyze.outputs.new-version }}
      release_notes: ${{ needs.analyze.outputs.release-notes }}
    secrets:
      SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

  # Job 4: Shorebird Patch (se for patch)
  shorebird-patch:
    needs: [analyze, versioning]
    if: needs.analyze.outputs.action == 'patch'
    uses: ./.github/workflows/shorebird-patch.yml
    with:
      version: ${{ needs.analyze.outputs.new-version }}
      change_type: ${{ needs.analyze.outputs.change-type }}
    secrets:
      SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

  # Job 5: Notifica√ß√µes e Cleanup
  notify:
    needs: [analyze, versioning, shorebird-release, shorebird-patch]
    if: always()
    uses: ./.github/workflows/notify-results.yml
    with:
      action: ${{ needs.analyze.outputs.action }}
      version: ${{ needs.analyze.outputs.new-version }}
      change_type: ${{ needs.analyze.outputs.change-type }}
      release_success: ${{ needs.shorebird-release.result == 'success' }}
      patch_success: ${{ needs.shorebird-patch.result == 'success' }}
      version_updated: ${{ needs.versioning.outputs.version-updated }}