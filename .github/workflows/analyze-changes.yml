name: Analyze Changes

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Nome da branch"
        required: true
        type: string
    outputs:
      action:
        description: "Acao a ser executada (release/patch)"
        value: ${{ jobs.analyze.outputs.action }}
      current-version:
        description: "Versao atual"
        value: ${{ jobs.analyze.outputs.current-version }}
      new-version:
        description: "Nova versao"
        value: ${{ jobs.analyze.outputs.new-version }}
      should-proceed:
        description: "Deve prosseguir com pipeline"
        value: ${{ jobs.analyze.outputs.should-proceed }}
      change-type:
        description: "Tipo de mudanca (major/minor/patch)"
        value: ${{ jobs.analyze.outputs.change-type }}
      release-notes:
        description: "Notas da release"
        value: ${{ jobs.analyze.outputs.release-notes }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  analyze:
    runs-on: windows-latest
    outputs:
      action: ${{ steps.decision.outputs.action }}
      current-version: ${{ steps.version.outputs.current-version-only }}
      new-version: ${{ steps.version.outputs.new-version }}
      should-proceed: ${{ steps.decision.outputs.should-proceed }}
      change-type: ${{ steps.analyze.outputs.change-type }}
      release-notes: ${{ steps.analyze.outputs.release-notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Analyze Code Changes
        id: analyze
        shell: powershell
        run: |
          Write-Output "Analisando mudancas no codigo..."

          # Configurar Git para evitar problemas
          git config --global core.autocrlf false
          git config --global --add safe.directory '*'

          # Obter commits usando multiplas estrategias
          $commits = @()

          Write-Output "Tentando obter commits..."
          try {
            $commits = git log --oneline -5 --format="%s" 2>$null
            if ($commits) {
              Write-Output "Commits obtidos via git log"
            }
          } catch {
            Write-Output "Erro no git log"
          }

          if (-not $commits -or $commits.Count -eq 0) {
            $githubMessage = "${{ github.event.head_commit.message }}"
            if ($githubMessage -and $githubMessage -ne "") {
              $commits = @($githubMessage)
              Write-Output "Usando commit do GitHub event"
            } else {
              $commits = @("feat: automated pipeline")
              Write-Output "Usando commit fallback"
            }
          }

          # Obter arquivos modificados usando multiplas estrategias
          $changedFiles = @()

          Write-Output "Tentando obter arquivos modificados..."
          try {
            $changedFiles = git diff --name-only HEAD~1..HEAD 2>$null
            if ($changedFiles) {
              Write-Output "Arquivos obtidos via git diff"
            }
          } catch {
            Write-Output "Erro no git diff"
          }

          if (-not $changedFiles -or $changedFiles.Count -eq 0) {
            try {
              $changedFiles = git show --name-only --format="" HEAD 2>$null
              if ($changedFiles) {
                Write-Output "Arquivos obtidos via git show"
              }
            } catch {
              Write-Output "Erro no git show"
            }
          }

          if (-not $changedFiles -or $changedFiles.Count -eq 0) {
            Write-Output "Usando arquivos padrao do projeto"
            $defaultFiles = @("pubspec.yaml", "lib/main.dart", "lib/", "android/", "windows/")
            $changedFiles = @()
            foreach ($file in $defaultFiles) {
              if (Test-Path $file) {
                $changedFiles += $file
              }
            }
          }

          Write-Output "Commits analisados:"
          $commits | ForEach-Object { Write-Output "  - $_" }

          Write-Output "Arquivos analisados:"
          $changedFiles | ForEach-Object { Write-Output "  - $_" }

          # Analisar tipo de mudanca
          $isBreakingChange = $false
          $isMajorFeature = $false
          $hasNewDependencies = $false
          $hasNativeChanges = $false
          $isPatchOnly = $true

          # Analisar commits
          foreach ($commit in $commits) {
            if ($commit -like "*BREAKING*" -or $commit -like "*!:*") {
              $isBreakingChange = $true
              $isPatchOnly = $false
              Write-Output "Breaking change detectado: $commit"
            } elseif ($commit -like "*feat*" -or $commit -like "*feature*") {
              $isMajorFeature = $true
              $isPatchOnly = $false
              Write-Output "Nova feature detectada: $commit"
            } elseif ($commit -like "*fix*") {
              Write-Output "Bug fix detectado: $commit"
            }
          }

          # Analisar arquivos
          foreach ($file in $changedFiles) {
            if ($file -like "*pubspec.yaml*") {
              $hasNewDependencies = $true
              $isPatchOnly = $false
              Write-Output "Mudanca em pubspec.yaml detectada"
            } elseif ($file -like "*android/*" -or $file -like "*ios/*" -or $file -like "*windows/*") {
              $hasNativeChanges = $true
              $isPatchOnly = $false
              Write-Output "Mudancas nativas detectadas"
            } elseif ($file -like "*lib/main.dart*") {
              $isPatchOnly = $false
              Write-Output "Mudanca em main.dart detectada"
            }
          }

          # Determinar tipo de mudanca
          if ($isBreakingChange) {
            $changeType = "major"
            Write-Output "Resultado: MAJOR RELEASE (breaking change)"
          } elseif ($isMajorFeature -or $hasNewDependencies -or $hasNativeChanges) {
            $changeType = "minor"
            Write-Output "Resultado: MINOR RELEASE (nova feature/dependencia)"
          } else {
            $changeType = "patch"
            Write-Output "Resultado: PATCH (correcao/melhoria)"
          }

          # Gerar notas da release
          $releaseNotes = @()
          $releaseNotes += "### Mudancas nesta versao"
          $releaseNotes += ""

          foreach ($commit in $commits) {
            if ($commit -notlike "*chore*" -and $commit -notlike "*ci*") {
              $icon = "[FEAT]"
              if ($commit -like "*feat*") { $icon = "[FEAT]" }
              elseif ($commit -like "*fix*") { $icon = "[FIX]" }
              elseif ($commit -like "*perf*") { $icon = "[PERF]" }
              
              $releaseNotes += "- $icon $commit"
            }
          }

          $releaseNotesText = $releaseNotes -join "`n"

          # Set outputs
          echo "change-type=$changeType" >> $env:GITHUB_OUTPUT
          echo "is-patch-only=$isPatchOnly" >> $env:GITHUB_OUTPUT
          echo "has-breaking-changes=$isBreakingChange" >> $env:GITHUB_OUTPUT
          echo "has-new-dependencies=$hasNewDependencies" >> $env:GITHUB_OUTPUT
          echo "has-native-changes=$hasNativeChanges" >> $env:GITHUB_OUTPUT

          echo "release-notes<<EOF" >> $env:GITHUB_OUTPUT
          echo $releaseNotesText >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

          Write-Output "Analise de mudancas concluida"

      - name: Determine Action
        id: decision
        shell: powershell
        run: |
          Write-Output "Determinando acao da pipeline..."

          $changeType = "${{ steps.analyze.outputs.change-type }}"
          $isPatchOnly = "${{ steps.analyze.outputs.is-patch-only }}"
          $branch = "${{ inputs.branch_name }}"

          Write-Output "Parametros:"
          Write-Output "  Branch: $branch"
          Write-Output "  Tipo: $changeType"
          Write-Output "  Patch only: $isPatchOnly"

          # Logica de decisao
          if ($branch -eq "1.0.14+1") {
            $action = "patch"
            Write-Output "Branch de patches detectada -> PATCH"
          } elseif ($changeType -eq "major" -or $changeType -eq "minor") {
            $action = "release"
            Write-Output "Mudanca significativa -> RELEASE"
          } elseif ($isPatchOnly -eq "true") {
            $action = "patch"
            Write-Output "Apenas mudancas pequenas -> PATCH"
          } else {
            $action = "release"
            Write-Output "Mudancas diversas -> RELEASE"
          }

          $shouldProceed = "true"

          # Verificar Shorebird token
          if ("${{ secrets.SHOREBIRD_TOKEN }}" -eq "") {
            Write-Output "AVISO: SHOREBIRD_TOKEN nao configurado"
          } else {
            Write-Output "SHOREBIRD_TOKEN disponivel"
          }

          echo "action=$action" >> $env:GITHUB_OUTPUT
          echo "should-proceed=$shouldProceed" >> $env:GITHUB_OUTPUT

          Write-Output "Decisao final:"
          Write-Output "  Acao: $action"
          Write-Output "  Prosseguir: $shouldProceed"

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "RESUMO DA ANALISE"
          Write-Output "=================="
          Write-Output "Acao: ${{ steps.decision.outputs.action }}"
          Write-Output "Tipo: ${{ steps.analyze.outputs.change-type }}"

          Write-Output "Branch: ${{ inputs.branch_name }}"
          Write-Output "Prosseguir: ${{ steps.decision.outputs.should-proceed }}"
          Write-Output "=================="
          Write-Output ""
          Write-Output "Analise concluida com sucesso!"
