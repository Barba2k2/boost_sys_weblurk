name: Analyze Changes

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Nome da branch"
        required: true
        type: string
    outputs:
      action:
        description: "Acao a ser executada (release/patch)"
        value: ${{ jobs.analyze.outputs.action }}
      current-version:
        description: "Versao atual completa"
        value: ${{ jobs.analyze.outputs.current-version }}
      new-version:
        description: "Nova versao calculada"
        value: ${{ jobs.analyze.outputs.new-version }}
      should-proceed:
        description: "Deve prosseguir com pipeline"
        value: ${{ jobs.analyze.outputs.should-proceed }}
      change-type:
        description: "Tipo de mudanca (major/minor/patch)"
        value: ${{ jobs.analyze.outputs.change-type }}
      release-notes:
        description: "Notas da release"
        value: ${{ jobs.analyze.outputs.release-notes }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  analyze:
    runs-on: windows-latest
    outputs:
      action: ${{ steps.decision.outputs.action }}
      current-version: ${{ steps.version.outputs.current-version-full }}
      new-version: ${{ steps.version.outputs.new-version }}
      should-proceed: "true"
      change-type: ${{ steps.analyze.outputs.change-type }}
      release-notes: ${{ steps.analyze.outputs.release-notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Code Changes
        id: analyze
        shell: powershell
        run: |
          # Este passo permanece o mesmo: analisa commits para determinar o tipo de mudança.
          # ... (script original de análise de commits e arquivos)
          Write-Output "Analisando mudancas no codigo..."
          git config --global core.autocrlf false; git config --global --add safe.directory '*'
          $commits = git log --oneline -5 --format="%s" 2>$null
          if (-not $commits) { $commits = @("${{ github.event.head_commit.message }}") }
          if (-not $commits) { $commits = @("feat: automated pipeline") }
          $changedFiles = git diff --name-only HEAD~1..HEAD 2>$null
          if (-not $changedFiles) { $changedFiles = git show --name-only --format="" HEAD 2>$null }
          $isBreakingChange = $false; $isMajorFeature = $false; $hasNewDependencies = $false; $hasNativeChanges = $false
          foreach ($commit in $commits) {
            if ($commit -like "*BREAKING*" -or $commit -like "*!:*") { $isBreakingChange = $true }
            elseif ($commit -like "*feat*" -or $commit -like "*feature*") { $isMajorFeature = $true }
          }
          foreach ($file in $changedFiles) {
            if ($file -like "*pubspec.yaml*") { $hasNewDependencies = $true }
            elseif ($file -like "*android/*" -or $file -like "*ios/*" -or $file -like "*windows/*") { $hasNativeChanges = $true }
          }
          if ($isBreakingChange) { $changeType = "major" }
          elseif ($isMajorFeature -or $hasNewDependencies -or $hasNativeChanges) { $changeType = "minor" }
          else { $changeType = "patch" }
          $releaseNotes = "### Mudanças nesta versão`n`n" + ($commits | Where-Object { $_ -notlike "*chore*" -and $_ -notlike "*ci*" } | ForEach-Object { "- $_" }) -join "`n"
          echo "change-type=$changeType" >> $env:GITHUB_OUTPUT
          echo "release-notes=$releaseNotes" >> $env:GITHUB_OUTPUT
          Write-Output "Analise de mudancas concluida. Tipo detectado: $changeType"

      - name: Get Current Version
        id: get-version
        shell: powershell
        run: |
          Write-Output "Lendo a versao atual do pubspec.yaml..."
          $pubspecContent = Get-Content pubspec.yaml -Raw
          $major = 0; $minor = 0; $patch = 0; $build = 0
          
          $versionPatternWithBuild = 'version:\s*(\d+)\.(\d+)\.(\d+)\+(\d+)'
          if ($pubspecContent -match $versionPatternWithBuild) {
              $major = $matches[1]; $minor = $matches[2]; $patch = $matches[3]; $build = $matches[4]
          } else {
              $versionPatternSimple = 'version:\s*(\d+)\.(\d+)\.(\d+)'
              if ($pubspecContent -match $versionPatternSimple) {
                  $major = $matches[1]; $minor = $matches[2]; $patch = $matches[3]; $build = 0
              } else {
                  throw "Nao foi possivel encontrar o padrao de versao no pubspec.yaml"
              }
          }
          
          echo "major=$major" >> $env:GITHUB_OUTPUT
          echo "minor=$minor" >> $env:GITHUB_OUTPUT
          echo "patch=$patch" >> $env:GITHUB_OUTPUT
          echo "build=$build" >> $env:GITHUB_OUTPUT
          Write-Output "Versao encontrada: $major.$minor.$patch+$build"

      - name: Determine Action
        id: decision
        shell: powershell
        run: |
          $changeType = "${{ steps.analyze.outputs.change-type }}"
          $build = [int]"${{ steps.get-version.outputs.build }}"
          Write-Output "Analisando: Tipo de Mudanca='$changeType', Build Atual='$build'"
          
          $action = ""
          if ($changeType -eq 'major' -or $changeType -eq 'minor') {
              $action = 'release'
              Write-Output "Decisao: Mudanca significativa ($changeType) => RELEASE"
          } elseif ($changeType -eq 'patch') {
              if ($build -ge 9) {
                  $action = 'release'
                  Write-Output "Decisao: Tipo patch, mas build e >= 9. Forcando => RELEASE"
              } else {
                  $action = 'patch'
                  Write-Output "Decisao: Tipo patch e build < 9 => PATCH"
              }
          }
          
          echo "action=$action" >> $env:GITHUB_OUTPUT
          Write-Output "Acao final determinada: $action"

      - name: Calculate New Version
        id: version
        shell: powershell
        run: |
          $action = "${{ steps.decision.outputs.action }}"
          $major = [int]"${{ steps.get-version.outputs.major }}"
          $minor = [int]"${{ steps.get-version.outputs.minor }}"
          $patch = [int]"${{ steps.get-version.outputs.patch }}"
          $build = [int]"${{ steps.get-version.outputs.build }}"
          $currentVersionFull = "$major.$minor.$patch+$build"
          
          $newVersion = ""
          if ($action -eq 'release') {
              $patch++
              $newVersion = "$major.$minor.$patch" # Nova release zera o conceito de build
              Write-Output "Acao de RELEASE: Nova versao base sera $newVersion"
          } else { # action must be 'patch'
              $build++
              $newVersion = "$major.$minor.$patch+$build"
              Write-Output "Acao de PATCH: Novo patch sera $newVersion"
          }

          echo "current-version-full=$currentVersionFull" >> $env:GITHUB_OUTPUT
          echo "new-version=$newVersion" >> $env:GITHUB_OUTPUT

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "RESUMO DA ANALISE"
          Write-Output "=================="
          Write-Output "Acao a ser tomada: ${{ steps.decision.outputs.action }}"
          Write-Output "Tipo da Mudança: ${{ steps.analyze.outputs.change-type }}"
          Write-Output "Versao Atual: ${{ steps.version.outputs.current-version-full }}"
          Write-Output "Proxima Versao: ${{ steps.version.outputs.new-version }}"
          Write-Output "=================="