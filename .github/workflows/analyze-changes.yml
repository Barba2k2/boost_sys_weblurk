name: Analyze Changes

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Nome da branch (ex: 1.0.14+1)"
        required: true
        type: string
    outputs:
      action:
        description: "Ação a ser executada (release/patch)"
        value: ${{ jobs.analyze.outputs.action }}
      current-version:
        description: "Versão atual"
        value: ${{ jobs.analyze.outputs.current-version }}
      new-version:
        description: "Nova versão"
        value: ${{ jobs.analyze.outputs.new-version }}
      should-proceed:
        description: "Deve prosseguir com pipeline"
        value: ${{ jobs.analyze.outputs.should-proceed }}
      change-type:
        description: "Tipo de mudança (major/minor/patch)"
        value: ${{ jobs.analyze.outputs.change-type }}
      release-notes:
        description: "Notas da release"
        value: ${{ jobs.analyze.outputs.release-notes }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  analyze:
    runs-on: windows-latest
    outputs:
      action: ${{ steps.decision.outputs.action }}
      current-version: ${{ steps.version.outputs.current-version }}
      new-version: ${{ steps.version.outputs.new-version }}
      should-proceed: ${{ steps.decision.outputs.should-proceed }}
      change-type: ${{ steps.analyze.outputs.change-type }}
      release-notes: ${{ steps.analyze.outputs.release-notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pipeline Validation
        shell: powershell
        run: |
          Write-Output "🔍 Validação inicial da pipeline..."
          Write-Output ""
          Write-Output "📋 Informações do contexto:"
          Write-Output "  Branch: ${{ inputs.branch_name }}"
          Write-Output "  Repository: ${{ github.repository }}"
          Write-Output "  Actor: ${{ github.actor }}"
          Write-Output "  Event: ${{ github.event_name }}"
          Write-Output "  SHA: ${{ github.sha }}"
          Write-Output "  Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Output ""
          
          # Verificar se temos acesso aos secrets necessários
          if ("${{ secrets.SHOREBIRD_TOKEN }}" -ne "") {
            Write-Output "✅ SHOREBIRD_TOKEN disponível"
          } else {
            Write-Output "❌ SHOREBIRD_TOKEN não configurado!"
            Write-Output "⚠️ Pipeline pode falhar nas etapas do Shorebird"
          }
          
          # Verificar estrutura do projeto
          Write-Output "📂 Verificando estrutura do projeto..."
          if (Test-Path "pubspec.yaml") {
            Write-Output "✅ pubspec.yaml encontrado"
          } else {
            Write-Output "❌ pubspec.yaml não encontrado!"
            throw "Projeto Flutter inválido - pubspec.yaml não encontrado"
          }
          
          if (Test-Path "lib") {
            Write-Output "✅ Pasta lib/ encontrada"
          } else {
            Write-Output "⚠️ Pasta lib/ não encontrada"
          }
          
          Write-Output "✅ Validação inicial concluída"

      - name: Setup Shorebird (for verification)
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Analyze Code Changes
        id: analyze
        shell: powershell
        run: |
          Write-Output "🔍 Analisando mudanças no código..."

          # Obter commits desde o último push (com fallback para commits recentes)
          try {
            $commits = git log --oneline -10 --format="%s" 2>$null
            if (-not $commits) {
              Write-Output "⚠️ Nenhum commit encontrado, usando fallback"
              $commits = @("feat: initial commit")
            }
          } catch {
            Write-Output "⚠️ Erro ao obter commits, usando fallback"
            $commits = @("feat: initial commit")
          }
          
          # Obter arquivos modificados (com fallback)
          try {
            $changedFiles = git diff --name-only HEAD~1..HEAD 2>$null
            if (-not $changedFiles) {
              Write-Output "ℹ️ Nenhum arquivo modificado detectado (possível primeiro commit)"
              # Para primeiro commit, assumir mudanças em arquivos importantes
              $changedFiles = @("lib/main.dart", "pubspec.yaml")
            }
          } catch {
            Write-Output "⚠️ Erro ao obter arquivos modificados, usando fallback"
            $changedFiles = @("lib/main.dart")
          }

          Write-Output "📝 Commits analisados:"
          $commits | ForEach-Object { Write-Output "  - $_" }

          Write-Output "📁 Arquivos analisados:"
          $changedFiles | ForEach-Object { Write-Output "  - $_" }

          # Inicializar flags de análise
          $isBreakingChange = $false
          $isMajorFeature = $false
          $hasNewDependencies = $false
          $hasNativeChanges = $false
          $hasInfraChanges = $false
          $isPatchOnly = $true

          # Analisar arquivos modificados
          foreach ($file in $changedFiles) {
            switch -Regex ($file) {
              "^pubspec\.yaml$" { 
                # Verificar se realmente adicionou dependências
                try {
                  $pubspecDiff = git diff HEAD~1..HEAD pubspec.yaml 2>$null
                  if ($pubspecDiff -and ($pubspecDiff -like "*dependencies:*" -or $pubspecDiff -like "*+*")) {
                    $hasNewDependencies = $true
                    $isPatchOnly = $false
                    Write-Output "  📦 Novas dependências detectadas"
                  }
                } catch {
                  Write-Output "  📦 Mudança em pubspec.yaml detectada"
                }
              }
              "^(android|ios|windows|macos|linux)/" { 
                $hasNativeChanges = $true
                $isPatchOnly = $false
                Write-Output "  🔧 Mudanças nativas detectadas: $file"
              }
              "^lib/main\.dart$" { 
                Write-Output "  🏗️ Mudança em main.dart detectada"
                $isPatchOnly = $false
              }
              "^lib/core/" { 
                Write-Output "  🏗️ Mudança de infraestrutura detectada: $file"
                $isPatchOnly = $false
              }
              "^\.github/workflows/" {
                $hasInfraChanges = $true
                Write-Output "  ⚙️ Mudanças de CI/CD detectadas: $file"
              }
              "\.dart$" {
                Write-Output "  📝 Código Dart modificado: $file"
              }
            }
          }

          # Analisar commits para padrões de conventional commits
          foreach ($commit in $commits) {
            switch -Regex ($commit) {
              "(BREAKING|!:)" { 
                $isBreakingChange = $true
                $isPatchOnly = $false
                Write-Output "  💥 Breaking change detectado: $commit"
              }
              "^(feat|feature)(\(.+\))?:" { 
                $isMajorFeature = $true
                $isPatchOnly = $false
                Write-Output "  ✨ Nova feature detectada: $commit"
              }
              "^(fix|bugfix)(\(.+\))?:" {
                Write-Output "  🐛 Bug fix detectado: $commit"
              }
              "^(style|refactor|perf|docs)(\(.+\))?:" {
                Write-Output "  🔧 Melhoria detectada: $commit"
              }
              "^(chore|build|ci)(\(.+\))?:" {
                Write-Output "  🔨 Mudança de manutenção: $commit"
              }
            }
          }

          # Determinar tipo de mudança com lógica melhorada
          if ($isBreakingChange) {
            $changeType = "major"
            Write-Output "📊 Resultado: MAJOR RELEASE (breaking change detectado)"
          } elseif ($isMajorFeature -or $hasNewDependencies -or $hasNativeChanges) {
            $changeType = "minor"
            Write-Output "📊 Resultado: MINOR RELEASE (nova feature/dependência/mudança nativa)"
          } else {
            $changeType = "patch"
            Write-Output "📊 Resultado: PATCH (correção/melhoria menor)"
          }

          # Gerar notas da release melhoradas
          $releaseNotes = @()
          $releaseNotes += "### 📝 Mudanças nesta versão"
          $releaseNotes += ""

          # Categorizar commits
          $features = @()
          $fixes = @()
          $improvements = @()
          $others = @()

          foreach ($commit in $commits) {
            if ($commit -notlike "*chore:*" -and $commit -notlike "*ci:*" -and $commit -notlike "*build:*") {
              switch -Regex ($commit) {
                "^feat" { $features += $commit }
                "^fix" { $fixes += $commit }
                "^(perf|style|refactor)" { $improvements += $commit }
                default { $others += $commit }
              }
            }
          }

          # Adicionar seções organizadas
          if ($features.Count -gt 0) {
            $releaseNotes += "#### ✨ Novas Funcionalidades"
            $features | ForEach-Object { $releaseNotes += "- $_" }
            $releaseNotes += ""
          }

          if ($fixes.Count -gt 0) {
            $releaseNotes += "#### 🐛 Correções"
            $fixes | ForEach-Object { $releaseNotes += "- $_" }
            $releaseNotes += ""
          }

          if ($improvements.Count -gt 0) {
            $releaseNotes += "#### 🔧 Melhorias"
            $improvements | ForEach-Object { $releaseNotes += "- $_" }
            $releaseNotes += ""
          }

          if ($others.Count -gt 0) {
            $releaseNotes += "#### 📝 Outras Mudanças"
            $others | ForEach-Object { $releaseNotes += "- $_" }
            $releaseNotes += ""
          }

          # Adicionar informações técnicas
          if ($hasNewDependencies -or $hasNativeChanges -or $hasInfraChanges) {
            $releaseNotes += "#### 🔧 Detalhes Técnicos"
            if ($hasNewDependencies) { $releaseNotes += "- 📦 Dependências atualizadas" }
            if ($hasNativeChanges) { $releaseNotes += "- 🔧 Mudanças em código nativo" }
            if ($hasInfraChanges) { $releaseNotes += "- ⚙️ Atualizações de infraestrutura" }
            $releaseNotes += ""
          }

          $releaseNotesText = $releaseNotes -join "`n"

          # Set outputs com validação
          echo "change-type=$changeType" >> $env:GITHUB_OUTPUT
          echo "is-patch-only=$isPatchOnly" >> $env:GITHUB_OUTPUT
          echo "has-breaking-changes=$isBreakingChange" >> $env:GITHUB_OUTPUT
          echo "has-new-dependencies=$hasNewDependencies" >> $env:GITHUB_OUTPUT
          echo "has-native-changes=$hasNativeChanges" >> $env:GITHUB_OUTPUT

          echo "release-notes<<EOF" >> $env:GITHUB_OUTPUT
          echo $releaseNotesText >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

          Write-Output "✅ Análise de mudanças concluída"

      - name: Get Current Version
        id: version
        shell: powershell
        run: |
          Write-Output "📋 Obtendo versão atual do pubspec.yaml..."

          try {
            $pubspecContent = Get-Content pubspec.yaml -Raw -ErrorAction Stop
            $versionMatch = $pubspecContent | Select-String 'version:\s*(.+)'
            
            if ($versionMatch) {
              $currentVersion = $versionMatch.Matches[0].Groups[1].Value.Trim()
              Write-Output "✅ Versão atual encontrada: $currentVersion"
              
              # Validar formato da versão
              if ($currentVersion -match '^\d+\.\d+\.\d+\+\d+$') {
                Write-Output "✅ Formato de versão válido"
              } else {
                Write-Output "⚠️ Formato de versão pode estar incorreto: $currentVersion"
              }
            } else {
              $currentVersion = "1.0.14+2"
              Write-Output "⚠️ Versão não encontrada no pubspec.yaml, usando fallback: $currentVersion"
            }
          } catch {
            $currentVersion = "1.0.14+2"
            Write-Output "❌ Erro ao ler pubspec.yaml: $_"
            Write-Output "🔄 Usando versão fallback: $currentVersion"
          }

          # Parse da versão atual com validação robusta
          try {
            $versionParts = $currentVersion -split '\+'
            $semverParts = $versionParts[0] -split '\.'
            $buildNumber = if ($versionParts.Length -gt 1) { [int]$versionParts[1] } else { 2 }

            $major = [int]$semverParts[0]
            $minor = [int]$semverParts[1]
            $patch = [int]$semverParts[2]
            
            Write-Output "📊 Versão parseada: Major=$major, Minor=$minor, Patch=$patch, Build=$buildNumber"
          } catch {
            Write-Output "❌ Erro ao parsear versão '$currentVersion': $_"
            Write-Output "🔄 Usando valores padrão"
            $major = 1
            $minor = 0
            $patch = 14
            $buildNumber = 2
          }

          # Calcular nova versão baseada no tipo de mudança
          $changeType = "${{ steps.analyze.outputs.change-type }}"

          switch ($changeType) {
            "major" { 
              $major += 1
              $minor = 0
              $patch = 0
              $buildNumber += 1
              Write-Output "📈 Major version bump: $major.0.0+$buildNumber"
            }
            "minor" { 
              $minor += 1
              $patch = 0
              $buildNumber += 1
              Write-Output "📈 Minor version bump: $major.$minor.0+$buildNumber"
            }
            "patch" { 
              $patch += 1
              $buildNumber += 1
              Write-Output "📈 Patch version bump: $major.$minor.$patch+$buildNumber"
            }
            default { 
              $patch += 1
              $buildNumber += 1
              Write-Output "📈 Default patch bump: $major.$minor.$patch+$buildNumber"
            }
          }

          $newVersion = "$major.$minor.$patch+$buildNumber"

          echo "current-version=$currentVersion" >> $env:GITHUB_OUTPUT
          echo "new-version=$newVersion" >> $env:GITHUB_OUTPUT

          Write-Output "📊 Versionamento final:"
          Write-Output "  Atual: $currentVersion"
          Write-Output "  Nova: $newVersion"
          Write-Output "  Tipo: $changeType"

      - name: Determine Action
        id: decision
        shell: powershell
        run: |
          Write-Output "🎯 Determinando ação da pipeline..."

          $changeType = "${{ steps.analyze.outputs.change-type }}"
          $isPatchOnly = "${{ steps.analyze.outputs.is-patch-only }}"
          $branch = "${{ inputs.branch_name }}"
          $hasBreakingChanges = "${{ steps.analyze.outputs.has-breaking-changes }}"

          Write-Output "📋 Parâmetros de decisão:"
          Write-Output "  Branch: $branch"
          Write-Output "  Tipo de mudança: $changeType"
          Write-Output "  Apenas patch: $isPatchOnly"
          Write-Output "  Breaking changes: $hasBreakingChanges"

          # Lógica melhorada de decisão
          if ($branch -like "*patch*" -or $branch -eq "1.0.14+1") {
            if ($changeType -eq "major" -and $hasBreakingChanges -eq "true") {
              $action = "release"
              Write-Output "🚀 Breaking change detectado em branch de patch → RELEASE forçada"
            } else {
              $action = "patch"
              Write-Output "🔧 Branch de patches detectada → PATCH"
            }
          } elseif ($changeType -eq "major") {
            $action = "release"
            Write-Output "🚀 Major change → RELEASE obrigatória"
          } elseif ($changeType -eq "minor") {
            $action = "release"
            Write-Output "🚀 Minor change → RELEASE (nova funcionalidade)"
          } elseif ($isPatchOnly -eq "true") {
            $action = "patch"
            Write-Output "🔧 Apenas mudanças pequenas → PATCH"
          } else {
            $action = "release"
            Write-Output "🚀 Mudanças diversas → RELEASE (seguro)"
          }

          # Verificar se deve prosseguir
          $shouldProceed = "true"

          # Verificações de sanidade aprimoradas
          try {
            if ("${{ secrets.SHOREBIRD_TOKEN }}" -eq "") {
              Write-Output "⚠️ SHOREBIRD_TOKEN não configurado - pipeline pode falhar"
            } else {
              Write-Output "✅ SHOREBIRD_TOKEN disponível"
            }
            
            # Verificar configuração do Shorebird (não bloqueante)
            try {
              $env:SHOREBIRD_TOKEN = "${{ secrets.SHOREBIRD_TOKEN }}"
              $shorebirdCheck = shorebird doctor 2>&1
              Write-Output "✅ Shorebird acessível"
            } catch {
              Write-Output "⚠️ Problema na verificação do Shorebird: $_"
              Write-Output "🔄 Continuando mesmo assim..."
            }
          } catch {
            Write-Output "⚠️ Erro nas verificações: $_"
            # Não falhar a pipeline por problemas de verificação
          }

          echo "action=$action" >> $env:GITHUB_OUTPUT
          echo "should-proceed=$shouldProceed" >> $env:GITHUB_OUTPUT

          Write-Output "📊 Decisão final:"
          Write-Output "  Ação: $action"
          Write-Output "  Deve prosseguir: $shouldProceed"
          Write-Output "  Versão alvo: ${{ steps.version.outputs.new-version }}"

      - name: Summary
        shell: powershell
        run: |
          Write-Output ""
          Write-Output "╔══════════════════════════════════════════════════════════════╗"
          Write-Output "║                   ANÁLISE CONCLUÍDA                         ║"
          Write-Output "╚══════════════════════════════════════════════════════════════╝"
          Write-Output ""
          Write-Output "📋 RESUMO DA ANÁLISE"
          Write-Output "==================="
          Write-Output "🎯 Ação decidida: ${{ steps.decision.outputs.action }}"
          Write-Output "📊 Tipo de mudança: ${{ steps.analyze.outputs.change-type }}"
          Write-Output "📱 Versionamento: ${{ steps.version.outputs.current-version }} → ${{ steps.version.outputs.new-version }}"
          Write-Output "🌟 Branch: ${{ inputs.branch_name }}"
          Write-Output "✅ Prosseguir: ${{ steps.decision.outputs.should-proceed }}"
          Write-Output "⏰ Timestamp: $(Get-Date -Format 'HH:mm:ss')"
          Write-Output "==================="
          Write-Output ""
          
          $action = "${{ steps.decision.outputs.action }}"
          if ($action -eq "release") {
            Write-Output "🚀 PRÓXIMA ETAPA: CRIAÇÃO DE RELEASE"
            Write-Output "  📦 Nova release base será criada no Shorebird"
            Write-Output "  🏷️ Tag Git será criada: v${{ steps.version.outputs.new-version }}"
            Write-Output "  📝 GitHub Release será publicada"
            Write-Output "  🔧 Futuros patches serão baseados nesta release"
          } else {
            Write-Output "🔧 PRÓXIMA ETAPA: CRIAÇÃO DE PATCH"
            Write-Output "  📥 Patch será criado no Shorebird"
            Write-Output "  🔄 Usuários receberão update automático"
            Write-Output "  ⚡ Download incremental menor"
            Write-Output "  🛡️ Rollback disponível se necessário"
          }
          Write-Output ""
          Write-Output "🎉 Análise bem-sucedida! Prosseguindo para próxima etapa..."