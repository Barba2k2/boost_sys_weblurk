name: Shorebird Patch

on:
  workflow_call:
    inputs:
      version:
        description: "Versão do patch"
        required: true
        type: string
      change_type:
        description: "Tipo de mudança"
        required: true
        type: string
    outputs:
      patch-created:
        description: "Patch foi criado"
        value: ${{ jobs.create-patch.outputs.patch-created }}
      target-release:
        description: "Release base do patch"
        value: ${{ jobs.create-patch.outputs.target-release }}
      patch-number:
        description: "Número do patch"
        value: ${{ jobs.create-patch.outputs.patch-number }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  create-patch:
    runs-on: windows-latest
    outputs:
      patch-created: ${{ steps.shorebird-patch.outputs.patch-created }}
      target-release: ${{ steps.target-release.outputs.target-release }}
      patch-number: ${{ steps.shorebird-patch.outputs.patch-number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Initial Environment Setup
        shell: powershell
        run: |
          # Configure encoding to prevent character issues
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          $env:PYTHONIOENCODING = "utf-8"
          
          Write-Host "Configurando ambiente inicial..."
          
          # Configure Git IMMEDIATELY to prevent Shorebird warnings
          Write-Host "Configurando Git..."
          try {
            git config --global core.longpaths true
            git config --global core.autocrlf false
            git config --global core.filemode false
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action Bot"
            
            # Verify Git configuration
            $longPaths = git config --global core.longpaths
            Write-Host "Git long paths configurado para: $longPaths"
            
            if ($longPaths -ne "true") {
              Write-Host "Tentando configuracao alternativa..."
              git config --system core.longpaths true 2>$null
              git config --global core.longpaths true
            }
            
            Write-Host "Git configurado com sucesso"
          } catch {
            Write-Host "Aviso: Erro na configuracao do Git: $_"
            Write-Host "Continuando mesmo assim..."
          }
          
          # Verify environment variables
          Write-Host "Verificando variaveis de ambiente..."
          if ($env:SHOREBIRD_TOKEN) {
            Write-Host "SHOREBIRD_TOKEN: Configurado"
          } else {
            throw "SHOREBIRD_TOKEN nao configurado"
          }
          
          if ($env:FLUTTER_ROOT) {
            Write-Host "FLUTTER_ROOT: $env:FLUTTER_ROOT"
          }
          
          Write-Host "Ambiente inicial configurado com sucesso"

      - name: Verify Shorebird Configuration
        shell: powershell
        run: |
          # Fix encoding issues first
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          $env:PYTHONIOENCODING = "utf-8"
          
          Write-Host "Verificando configuracao do Shorebird..."
          
          try {
            # Configure Git BEFORE any Shorebird commands
            Write-Host "Configurando Git para long paths..."
            git config --global core.longpaths true
            git config --global core.autocrlf false
            git config --global core.filemode false
            Write-Host "Git configurado com sucesso"
            
            # Verify Shorebird version
            Write-Host "Verificando versao do Shorebird..."
            $shorebirdVersion = shorebird --version
            Write-Host "Shorebird versao: $shorebirdVersion"
            
            # Check token
            if (-not $env:SHOREBIRD_TOKEN) {
              throw "SHOREBIRD_TOKEN nao configurado"
            }
            Write-Host "Token Shorebird configurado"
            
            # Test releases access with better error handling
            Write-Host "Verificando acesso as releases..."
            
            try {
              # Don't use Out-Null, capture the output properly
              $releasesResult = shorebird releases list 2>&1
              $releasesExitCode = $LASTEXITCODE
              
              Write-Host "Comando releases list executado (exit code: $releasesExitCode)"
              
              if ($releasesExitCode -eq 0) {
                Write-Host "Acesso as releases confirmado"
                
                # Check if we have releases or if it's empty (both are OK)
                if ($releasesResult -and $releasesResult.ToString().Trim()) {
                  Write-Host "Releases encontradas"
                } else {
                  Write-Host "Nenhuma release encontrada (normal para projetos novos)"
                }
              } else {
                Write-Host "Comando releases retornou codigo $releasesExitCode"
                Write-Host "Output: $releasesResult"
                
                # Check if it's just "no releases" which is acceptable
                if ($releasesResult -match "No releases found|not found|nenhuma release") {
                  Write-Host "Interpretando como 'sem releases' - isso e normal"
                } else {
                  throw "Falha no acesso as releases: $releasesResult"
                }
              }
            } catch {
              Write-Host "Erro ao verificar releases: $_"
              
              # Try alternative verification
              Write-Host "Tentando verificacao alternativa com 'doctor'..."
              try {
                $doctorResult = shorebird doctor 2>&1
                Write-Host "Comando doctor executado"
                Write-Host "Resultado: $doctorResult"
                
                if ($doctorResult -match "error|failed|erro") {
                  throw "Doctor reportou problemas: $doctorResult"
                } else {
                  Write-Host "Doctor nao reportou erros criticos"
                }
              } catch {
                throw "Falha na verificacao alternativa: $_"
              }
            }
            
            Write-Host "Configuracao do Shorebird validada com sucesso"
            
          } catch {
            Write-Host "Erro na verificacao do Shorebird: $_"
            
            # Additional diagnostics
            Write-Host "Informacoes de diagnostico:"
            Write-Host "- SHOREBIRD_TOKEN definido: $($env:SHOREBIRD_TOKEN -ne $null)"
            Write-Host "- Flutter version:"
            try { flutter --version } catch { Write-Host "Flutter nao disponivel" }
            Write-Host "- Git long paths:"
            try { git config --global core.longpaths } catch { Write-Host "Git config falhou" }
            
            throw "Configuracao do Shorebird invalida: $_"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Install Dependencies
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          
          Write-Host "Instalando dependencias Flutter..."
          
          try {
            flutter pub get
            Write-Host "Dependencias instaladas com sucesso"
            
            # Run analysis without treating warnings as errors for patches
            Write-Host "Executando analise de codigo..."
            flutter analyze --no-fatal-warnings --no-fatal-infos 2>$null
            Write-Host "Analise de codigo concluida"
            
          } catch {
            Write-Host "Aviso durante instalacao de dependencias: $_"
            Write-Host "Continuando com processo de patch..."
          }

      - name: Determine Target Release
        id: target-release
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          
          Write-Host "Determinando release alvo para o patch..."
          
          try {
            # Get list of releases in JSON format for better parsing
            $releasesJson = shorebird releases list --json 2>&1
            
            if ($LASTEXITCODE -eq 0 -and $releasesJson -and $releasesJson.Trim()) {
              try {
                $releases = $releasesJson | ConvertFrom-Json
                
                if ($releases -and $releases.Count -gt 0) {
                  # Get the most recent release
                  $latestRelease = $releases[0]
                  $targetVersion = $latestRelease.version
                  $releaseDate = $latestRelease.created_at
                  
                  Write-Host "Release alvo encontrada:"
                  Write-Host "  Versao: $targetVersion"
                  Write-Host "  Data: $releaseDate"
                  
                  # Check existing patches for this release
                  try {
                    $existingPatches = shorebird patches list --release-version=$targetVersion 2>&1
                    
                    if ($LASTEXITCODE -eq 0) {
                      if ($existingPatches -and $existingPatches.Trim()) {
                        Write-Host "Patches existentes encontrados para esta release"
                      } else {
                        Write-Host "Nenhum patch existente para esta release"
                      }
                    } else {
                      Write-Host "Nao foi possivel verificar patches existentes"
                    }
                  } catch {
                    Write-Host "Aviso: Nao foi possivel verificar patches existentes"
                  }
                  
                } else {
                  throw "Nenhuma release encontrada na lista"
                }
              } catch {
                Write-Host "Erro ao analisar JSON das releases: $_"
                # Fallback to text parsing
                $firstRelease = $releasesJson | Select-String "(\d+\.\d+\.\d+\+\d+)" | Select-Object -First 1
                if ($firstRelease) {
                  $targetVersion = $firstRelease.Matches[0].Groups[1].Value
                  Write-Host "Fallback: Usando versao de release $targetVersion"
                } else {
                  throw "Nao foi possivel analisar nenhuma versao de release"
                }
              }
            } else {
              throw "Nenhuma release disponivel ou comando falhou"
            }
            
            echo "target-release=$targetVersion" >> $env:GITHUB_OUTPUT
            Write-Host "Release alvo definida como: $targetVersion"
            
          } catch {
            Write-Host "Erro ao determinar release alvo: $_"
            # Use fallback version
            $fallbackVersion = "1.0.14+2"
            Write-Host "Usando versao fallback: $fallbackVersion"
            echo "target-release=$fallbackVersion" >> $env:GITHUB_OUTPUT
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Pre-Patch Validation
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          
          $version = "${{ inputs.version }}"
          $targetRelease = "${{ steps.target-release.outputs.target-release }}"
          $changeType = "${{ inputs.change_type }}"
          
          Write-Host "Validacao pre-patch..."
          Write-Host "  Versao do patch: $version"
          Write-Host "  Release alvo: $targetRelease"
          Write-Host "  Tipo de mudanca: $changeType"
          
          # Validate that target release exists
          try {
            $releases = shorebird releases list 2>&1
            if ($releases -like "*$targetRelease*") {
              Write-Host "Release alvo $targetRelease confirmada"
            } else {
              Write-Host "Aviso: Release alvo $targetRelease nao encontrada na lista"
              Write-Host "Releases disponiveis:"
              $releases | Select-Object -First 5 | Write-Host
            }
          } catch {
            Write-Host "Aviso: Nao foi possivel validar release alvo: $_"
          }
          
          # Warn about change types that might be better as releases
          if ($changeType -eq "major") {
            Write-Host "Aviso: Mudancas major detectadas - considere criar uma release ao inves de um patch"
          } elseif ($changeType -eq "minor") {
            Write-Host "Aviso: Mudancas minor detectadas - considere se isso deveria ser uma release"
          }
          
          Write-Host "Validacao pre-patch concluida"
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Create Shorebird Patch
        id: shorebird-patch
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          
          $version = "${{ inputs.version }}"
          $targetRelease = "${{ steps.target-release.outputs.target-release }}"
          $changeType = "${{ inputs.change_type }}"
          
          Write-Host "Criando patch Shorebird para Windows..."
          Write-Host "  Versao do patch: $version"
          Write-Host "  Release alvo: $targetRelease"
          Write-Host "  Tipo de mudanca: $changeType"
          Write-Host "  Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          try {
            # Clean build directory
            Write-Host "Limpando diretorio de build..."
            flutter clean
            flutter pub get
            
            $patchSuccess = $false
            $patchOutput = ""
            $attempts = 0
            $maxAttempts = 3
            
            while (-not $patchSuccess -and $attempts -lt $maxAttempts) {
              $attempts++
              Write-Host "Tentativa de criacao de patch $attempts de $maxAttempts..."
              
              try {
                switch ($attempts) {
                  1 { 
                    Write-Host "Tentando patch com versao de release especifica..."
                    if ($targetRelease -and $targetRelease -ne "") {
                      $patchOutput = shorebird patch windows --release-version=$targetRelease --verbose 2>&1
                    } else {
                      $patchOutput = shorebird patch windows --verbose 2>&1
                    }
                  }
                  2 { 
                    Write-Host "Tentando patch sem especificar versao de release..."
                    $patchOutput = shorebird patch windows --verbose 2>&1
                  }
                  3 { 
                    Write-Host "Tentando patch sem saida verbose..."
                    $patchOutput = shorebird patch windows 2>&1
                  }
                }
                
                if ($LASTEXITCODE -eq 0) {
                  $patchSuccess = $true
                  Write-Host "Patch criado com sucesso na tentativa $attempts"
                  break
                } else {
                  Write-Host "Tentativa $attempts falhou com codigo de saida: $LASTEXITCODE"
                  Write-Host "Saida: $patchOutput"
                  
                  if ($attempts -lt $maxAttempts) {
                    Write-Host "Tentando novamente..."
                    Start-Sleep -Seconds 5
                  }
                }
              } catch {
                Write-Host "Excecao na tentativa $attempts: $_"
                if ($attempts -eq $maxAttempts) {
                  throw "Todas as tentativas de patch falharam"
                }
              }
            }
            
            # Display final output
            Write-Host "Saida final da criacao do patch:"
            $patchOutput | Write-Host
            
            if ($patchSuccess) {
              Write-Host "Patch Shorebird criado com sucesso!"
              echo "patch-created=true" >> $env:GITHUB_OUTPUT
              
              # Try to extract patch number from output
              $patchNumberMatch = $patchOutput | Select-String "Patch (\d+)" | Select-Object -First 1
              if ($patchNumberMatch) {
                $patchNumber = $patchNumberMatch.Matches[0].Groups[1].Value
                echo "patch-number=$patchNumber" >> $env:GITHUB_OUTPUT
                Write-Host "Numero do patch: $patchNumber"
              } else {
                echo "patch-number=unknown" >> $env:GITHUB_OUTPUT
                Write-Host "Numero do patch nao pode ser determinado"
              }
              
            } else {
              Write-Host "Falha ao criar patch apos todas as tentativas"
              echo "patch-created=false" >> $env:GITHUB_OUTPUT
              echo "patch-number=failed" >> $env:GITHUB_OUTPUT
              throw "Criacao de patch Shorebird falhou"
            }
            
          } catch {
            Write-Host "Erro critico durante criacao do patch: $_"
            echo "patch-created=false" >> $env:GITHUB_OUTPUT
            echo "patch-number=error" >> $env:GITHUB_OUTPUT
            
            # Additional diagnostics
            try {
              Write-Host "Executando diagnosticos adicionais..."
              shorebird doctor 2>&1
              
              Write-Host "Releases recentes:"
              shorebird releases list 2>&1 | Select-Object -First 3
              
            } catch {
              Write-Host "Nao foi possivel executar diagnosticos adicionais"
            }
            
            throw "Falha ao criar patch Shorebird: $_"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Post-Patch Validation
        if: steps.shorebird-patch.outputs.patch-created == 'true'
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          
          $targetRelease = "${{ steps.target-release.outputs.target-release }}"
          $patchNumber = "${{ steps.shorebird-patch.outputs.patch-number }}"
          
          Write-Host "Validacao pos-patch..."
          
          try {
            # Wait a moment for the patch to propagate
            Start-Sleep -Seconds 10
            
            # Verify patch appears in the list
            Write-Host "Verificando patches para release $targetRelease..."
            
            $patches = shorebird patches list --release-version=$targetRelease 2>&1
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Patches para release $targetRelease:"
              $patches | Write-Host
              
              # Check if our specific patch is there
              if ($patchNumber -and $patchNumber -ne "unknown" -and $patchNumber -ne "failed") {
                if ($patches -like "*Patch $patchNumber*" -or $patches -like "*$patchNumber*") {
                  Write-Host "Patch $patchNumber confirmado na lista"
                } else {
                  Write-Host "Patch $patchNumber ainda nao visivel (pode ser delay de propagacao)"
                }
              }
              
            } else {
              Write-Host "Nao foi possivel verificar patches (codigo de saida: $LASTEXITCODE)"
              Write-Host "Saida: $patches"
            }
            
            # List all patches for debug
            Write-Host "Todos os patches no projeto:"
            try {
              shorebird patches list 2>&1 | Select-Object -First 10
            } catch {
              Write-Host "Nao foi possivel listar todos os patches"
            }
            
          } catch {
            Write-Host "Erro na validacao pos-patch: $_"
            # Don't fail the workflow for validation errors
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Patch Distribution Info
        if: steps.shorebird-patch.outputs.patch-created == 'true'
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $targetRelease = "${{ steps.target-release.outputs.target-release }}"
          $patchNumber = "${{ steps.shorebird-patch.outputs.patch-number }}"
          
          Write-Host ""
          Write-Host "INFORMACOES DE DISTRIBUICAO DO PATCH"
          Write-Host "===================================="
          Write-Host "Patch criado e pronto para distribuicao!"
          Write-Host ""
          Write-Host "Detalhes do Patch:"
          Write-Host "  Versao: $version"
          Write-Host "  Release alvo: $targetRelease"
          Write-Host "  Numero do patch: $patchNumber"
          Write-Host "  Criado em: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host ""
          Write-Host "Como os usuarios receberao este patch:"
          Write-Host "  1. Usuarios com release $targetRelease instalada"
          Write-Host "  2. Receberao atualizacao automatica na proxima abertura do app"
          Write-Host "  3. Deteccao ocorre em 30-60 segundos apos abrir o app"
          Write-Host "  4. Download do patch (tipicamente < 1MB)"
          Write-Host "  5. Aplicacao automatica apos usuario aceitar a atualizacao"
          Write-Host ""
          Write-Host "Recomendacoes de monitoramento:"
          Write-Host "  - Verificar logs de atualizacao em dispositivos dos usuarios"
          Write-Host "  - Monitorar metricas no dashboard do Shorebird"
          Write-Host "  - Observar crash reports apos distribuicao"
          Write-Host ""
          Write-Host "Comandos uteis:"
          Write-Host "  shorebird patches list --release-version=$targetRelease"
          Write-Host "  shorebird releases list"
          Write-Host "===================================="

      - name: Summary
        shell: powershell
        run: |
          Write-Host ""
          Write-Host "RESUMO DA CRIACAO DO PATCH"
          Write-Host "=========================="
          Write-Host "Versao: ${{ inputs.version }}"
          Write-Host "Release alvo: ${{ steps.target-release.outputs.target-release }}"
          Write-Host "Patch criado: ${{ steps.shorebird-patch.outputs.patch-created }}"
          Write-Host "Numero do patch: ${{ steps.shorebird-patch.outputs.patch-number }}"
          Write-Host "Tipo de mudanca: ${{ inputs.change_type }}"
          Write-Host "Concluido em: $(Get-Date -Format 'HH:mm:ss')"
          Write-Host "=========================="
          
          if ("${{ steps.shorebird-patch.outputs.patch-created }}" -eq "true") {
            Write-Host ""
            Write-Host "PATCH CRIADO COM SUCESSO!"
            Write-Host ""
            Write-Host "Proximos passos automaticos:"
            Write-Host "  1. Patch disponivel no Shorebird"
            Write-Host "  2. Distribuicao automatica para usuarios"
            Write-Host "  3. Atualizacoes automaticas na proxima abertura do app"
            Write-Host "  4. Monitoramento de adocao disponivel"
            Write-Host ""
            Write-Host "Usuarios alvo:"
            Write-Host "  - Dispositivos com release ${{ steps.target-release.outputs.target-release }}"
            Write-Host "  - Aplicacao instalada e funcional"
            Write-Host "  - Conexao de internet ativa"
            Write-Host ""
          } else {
            Write-Host ""
            Write-Host "CRIACAO DO PATCH FALHOU"
            Write-Host "Verifique logs acima para detalhes do erro"
            Write-Host ""
          }