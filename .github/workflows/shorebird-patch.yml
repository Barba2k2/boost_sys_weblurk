name: Shorebird Patch

on:
  workflow_call:
    inputs:
      version:
        description: "Versão do patch"
        required: true
        type: string
      change_type:
        description: "Tipo de mudança"
        required: true
        type: string
    outputs:
      patch-created:
        description: "Patch foi criado"
        value: ${{ jobs.create-patch.outputs.patch-created }}
      target-release:
        description: "Release base do patch"
        value: ${{ jobs.create-patch.outputs.target-release }}
      patch-number:
        description: "Número do patch"
        value: ${{ jobs.create-patch.outputs.patch-number }}
    secrets:
      SHOREBIRD_TOKEN:
        required: true

jobs:
  create-patch:
    runs-on: windows-latest
    outputs:
      patch-created: ${{ steps.shorebird-patch.outputs.patch-created }}
      target-release: ${{ steps.target-release.outputs.target-release }}
      patch-number: ${{ steps.shorebird-patch.outputs.patch-number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"
          cache: true

      - name: Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: Verify Shorebird Configuration
        shell: powershell
        run: |
          Write-Output "Habilitando suporte a caminhos de arquivo longos no Git..."
          git config --global core.longpaths true
        
          Write-Output "Verificando configuracao do Shorebird para patches..."
          try {
            $shorebirdVersion = shorebird --version
            Write-Output "Shorebird versao: $shorebirdVersion"
            
            Write-Output "Verificando releases disponiveis..."
            $releases = shorebird releases list 2>$null
            
            if (-not $releases -or $releases.Length -eq 0) {
              Write-Output "Nenhuma release encontrada!"
              Write-Output "E necessario ter pelo menos uma release base para criar patches"
              throw "Nenhuma release base disponivel"
            }
            
            Write-Output "Releases encontradas:"
            $releases | head -5 | Write-Output
            
          } catch {
            Write-Output "Erro na verificacao do Shorebird: $_"
            throw "Configuracao do Shorebird invalida para patches"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Install Dependencies
        shell: powershell
        run: |
          Write-Output "Instalando dependencias Flutter..."
          try {
            flutter pub get
            Write-Output "Dependencias instaladas com sucesso"
            
            Write-Output "Verificacao rapida do codigo..."
            flutter analyze --no-fatal-warnings 2>$null
            Write-Output "Codigo verificado"
            
          } catch {
            Write-Output "Aviso durante preparacao: $_"
          }

      - name: Determine Target Release
        id: target-release
        shell: powershell
        run: |
          Write-Output "Determinando release base para o patch..."
          try {
            $releasesJson = shorebird releases list --json 2>$null
            
            if ($releasesJson) {
              $releases = $releasesJson | ConvertFrom-Json
              
              if ($releases -and $releases.Count -gt 0) {
                $latestRelease = $releases[0]
                $targetVersion = $latestRelease.version
                $releaseDate = $latestRelease.created_at
                
                Write-Output "Release base encontrada:"
                Write-Output "  Versao: $targetVersion"
                Write-Output "  Data: $releaseDate"
                
              } else {
                $targetVersion = "1.0.14+2"
                Write-Output "Lista de releases vazia, usando fallback: $targetVersion"
              }
              
            } else {
              $targetVersion = "1.0.14+2"
              Write-Output "Erro ao buscar releases, usando fallback: $targetVersion"
            }
            
            echo "target-release=$targetVersion" >> $env:GITHUB_OUTPUT
            Write-Output "Release alvo para patch: $targetVersion"
            
          } catch {
            $targetVersion = "1.0.14+2"
            Write-Output "Erro na determinacao da release base: $_"
            Write-Output "Usando fallback final: $targetVersion"
            echo "target-release=$targetVersion" >> $env:GITHUB_OUTPUT
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Pre-Patch Validation
        shell: powershell
        run: |
          $version = "${{ inputs.version }}"
          $targetRelease = "${{ steps.target-release.outputs.target-release }}"
          $changeType = "${{ inputs.change_type }}"
          Write-Output "Validação pré-patch..."
          Write-Output "  Versao do patch: $version"
          Write-Output "  Release base: $targetRelease"
          Write-Output "  Tipo de mudanca: $changeType"
          if ($changeType -eq "major" -or $changeType -eq "minor") {
            Write-Output "Considere criar uma release ao inves de patch para mudancas $changeType"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Create Shorebird Patch
        id: shorebird-patch
        shell: powershell
        run: |
          $targetRelease = "${{ steps.target-release.outputs.target-release }}"
          Write-Output "Criando patch Shorebird para Windows..."
          Write-Output "  Release base: $targetRelease"
          try {
            $patchOutput = shorebird patch windows --release-version=$targetRelease --verbose 2>&1
            Write-Output "Output da criacao do patch:"
            $patchOutput | Write-Output
            
            if ($LASTEXITCODE -eq 0) {
              Write-Output "Patch Shorebird criado com sucesso!"
              echo "patch-created=true" >> $env:GITHUB_OUTPUT
              
              $patchNumberMatch = $patchOutput | Select-String "Patch (\d+)" | Select-Object -First 1
              if ($patchNumberMatch) {
                $patchNumber = $patchNumberMatch.Matches[0].Groups[1].Value
                echo "patch-number=$patchNumber" >> $env:GITHUB_OUTPUT
                Write-Output "Numero do patch: $patchNumber"
              }
            } else {
              echo "patch-created=false" >> $env:GITHUB_OUTPUT
              throw "Shorebird patch falhou"
            }
          } catch {
            Write-Error "Erro durante criacao do patch: $_"
            echo "patch-created=false" >> $env:GITHUB_OUTPUT
            throw "Falha na criacao do patch Shorebird"
          }
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Summary
        shell: powershell
        if: always()
        run: |
          Write-Output ""
          Write-Output "RESUMO DO PATCH"
          Write-Output "=================="
          Write-Output "Versao: ${{ inputs.version }}"
          Write-Output "Release base: ${{ steps.target-release.outputs.target-release }}"
          Write-Output "Patch criado: ${{ steps.shorebird-patch.outputs.patch-created }}"
          Write-Output "Numero: ${{ steps.shorebird-patch.outputs.patch-number }}"
          Write-Output "Tipo: ${{ inputs.change_type }}"
          Write-Output "=================="
          if ("${{ steps.shorebird-patch.outputs.patch-created }}" -eq "true") {
            Write-Host "PATCH CRIADO COM SUCESSO!" -ForegroundColor Green
          } else {
            Write-Error "FALHA NA CRIAÇÃO DO PATCH. Verifique logs acima."
          }