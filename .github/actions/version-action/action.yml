name: 'Version Management Action'
description: 'Gerencia versionamento baseado no pubspec.yaml com limite de build number at√© +9'

inputs:
  pubspec-path:
    description: 'Caminho para o arquivo pubspec.yaml'
    required: false
    default: 'pubspec.yaml'
  
  github-env-path:
    description: 'Caminho para o arquivo GITHUB_ENV'
    required: false
    default: '${{ env.GITHUB_ENV }}'
  
  auto-push:
    description: 'Realizar push autom√°tico das mudan√ßas'
    required: false
    default: 'true'
  
  auto-commit:
    description: 'Realizar commit autom√°tico das mudan√ßas'
    required: false
    default: 'true'
  
  change-type:
    description: 'Tipo de mudan√ßa (major/minor/patch)'
    required: false
    default: 'patch'

outputs:
  new-tag:
    description: 'Nova tag no formato vX.Y.Z'
    value: ${{ steps.version.outputs.new-tag }}
  
  new-version:
    description: 'Nova vers√£o completa no formato X.Y.Z+B'
    value: ${{ steps.version.outputs.new-version }}
  
  new-build:
    description: 'Novo build number'
    value: ${{ steps.version.outputs.new-build }}
  
  current-version-only:
    description: 'Vers√£o atual sem build number'
    value: ${{ steps.version.outputs.current-version-only }}
  
  should-increment-patch:
    description: 'Se deve incrementar o patch version (build >= 9)'
    value: ${{ steps.version.outputs.should-increment-patch }}

runs:
  using: 'composite'
  steps:
    - name: Extract version from pubspec.yaml
      id: version
      shell: bash
      run: |
        # Fun√ß√£o para extrair vers√£o do pubspec.yaml
        extract_version_from_pubspec() {
            local version_line=$(grep "^version:" ${{ inputs.pubspec-path }} | head -1)
            if [[ $version_line =~ version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+)\+([0-9]+) ]]; then
                echo "${BASH_REMATCH[1]}+${BASH_REMATCH[2]}"
            else
                echo "1.0.0+1"
            fi
        }

        # Fun√ß√£o para extrair apenas a vers√£o sem build number
        extract_version_only() {
            local version_line=$(grep "^version:" ${{ inputs.pubspec-path }} | head -1)
            if [[ $version_line =~ version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                echo "${BASH_REMATCH[1]}"
            else
                echo "1.0.0"
            fi
        }

        # Fun√ß√£o para extrair apenas o build number
        extract_build_number() {
            local version_line=$(grep "^version:" ${{ inputs.pubspec-path }} | head -1)
            if [[ $version_line =~ version:[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+\+([0-9]+) ]]; then
                echo "${BASH_REMATCH[1]}"
            else
                echo "1"
            fi
        }

        # Obter vers√£o atual do pubspec.yaml
        CURRENT_VERSION=$(extract_version_from_pubspec)
        CURRENT_VERSION_ONLY=$(extract_version_only)
        CURRENT_BUILD=$(extract_build_number)

        echo "Vers√£o atual do pubspec: $CURRENT_VERSION"
        echo "Vers√£o sem build: $CURRENT_VERSION_ONLY"
        echo "Build atual: $CURRENT_BUILD"

        # Verificar se precisa incrementar a vers√£o ou apenas o build
        # Considerar o tipo de mudan√ßa se fornecido
        CHANGE_TYPE="${{ inputs.change-type }}"
        
        if [ "$CHANGE_TYPE" = "major" ]; then
            # Major: incrementar major version e resetar minor/patch
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION_ONLY"
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION_ONLY="${NEW_MAJOR}.0.0"
            NEW_BUILD=1
            NEW_VERSION="${NEW_VERSION_ONLY}+${NEW_BUILD}"
            NEW_TAG="v${NEW_VERSION_ONLY}"
            SHOULD_INCREMENT_PATCH="true"
            echo "Major change detectado, incrementando major version"
        elif [ "$CHANGE_TYPE" = "minor" ]; then
            # Minor: incrementar minor version e resetar patch
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION_ONLY"
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION_ONLY="${MAJOR}.${NEW_MINOR}.0"
            NEW_BUILD=1
            NEW_VERSION="${NEW_VERSION_ONLY}+${NEW_BUILD}"
            NEW_TAG="v${NEW_VERSION_ONLY}"
            SHOULD_INCREMENT_PATCH="true"
            echo "Minor change detectado, incrementando minor version"
        elif [ $CURRENT_BUILD -ge 9 ]; then
            # Se build >= 9, incrementar o patch version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION_ONLY"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION_ONLY="${MAJOR}.${MINOR}.${NEW_PATCH}"
            NEW_BUILD=1
            NEW_VERSION="${NEW_VERSION_ONLY}+${NEW_BUILD}"
            NEW_TAG="v${NEW_VERSION_ONLY}"
            SHOULD_INCREMENT_PATCH="true"
            echo "Build number atingiu limite (9), incrementando patch version"
        else
            # Se build < 9, apenas incrementar o build number
            NEW_BUILD=$((CURRENT_BUILD + 1))
            NEW_VERSION="${CURRENT_VERSION_ONLY}+${NEW_BUILD}"
            NEW_TAG="v${CURRENT_VERSION_ONLY}"
            SHOULD_INCREMENT_PATCH="false"
            echo "Incrementando apenas o build number"
        fi

        # Exibe informa√ß√µes para debug
        echo "Novo build: $NEW_BUILD"
        echo "Nova vers√£o: $NEW_VERSION"
        echo "Nova tag: $NEW_TAG"

        # Definir outputs
        echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new-build=$NEW_BUILD" >> $GITHUB_OUTPUT
        echo "current-version-only=$CURRENT_VERSION_ONLY" >> $GITHUB_OUTPUT
        echo "should-increment-patch=$SHOULD_INCREMENT_PATCH" >> $GITHUB_OUTPUT

        # Exportar vari√°veis de ambiente
        echo "NEW_TAG=$NEW_TAG" >> ${{ inputs.github-env-path }}
        echo "NEW_VERSION=$NEW_VERSION" >> ${{ inputs.github-env-path }}
        echo "NEW_BUILD=$NEW_BUILD" >> ${{ inputs.github-env-path }}
        echo "CURRENT_VERSION_ONLY=$CURRENT_VERSION_ONLY" >> ${{ inputs.github-env-path }}
        echo "SHOULD_INCREMENT_PATCH=$SHOULD_INCREMENT_PATCH" >> ${{ inputs.github-env-path }}

        echo "‚úÖ Versionamento processado com sucesso!"
        echo "üì¶ Nova tag: $NEW_TAG"
        echo "üî¢ Nova vers√£o: $NEW_VERSION"
        echo "üèóÔ∏è Novo build: $NEW_BUILD"

        # Atualizar automaticamente o pubspec.yaml
        echo "üîÑ Atualizando pubspec.yaml com nova vers√£o..."
        sed -i "s/^version: .*/version: $NEW_VERSION/" ${{ inputs.pubspec-path }}
        
        # Verificar se a atualiza√ß√£o foi bem-sucedida
        UPDATED_VERSION=$(grep "^version:" ${{ inputs.pubspec-path }} | head -1 | sed 's/version: //')
        if [ "$UPDATED_VERSION" = "$NEW_VERSION" ]; then
            echo "‚úÖ pubspec.yaml atualizado com sucesso para vers√£o $NEW_VERSION"
        else
            echo "‚ùå Erro ao atualizar pubspec.yaml"
            exit 1
        fi

        # Commit autom√°tico das mudan√ßas (se habilitado)
        if [ "${{ inputs.auto-commit }}" = "true" ]; then
            echo "üìù Preparando commit autom√°tico..."
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            
            # Adicionar mudan√ßas
            git add ${{ inputs.pubspec-path }}
            
            # Verificar se h√° mudan√ßas para commitar
            if git diff --staged --quiet; then
                echo "‚ÑπÔ∏è Nenhuma mudan√ßa detectada no pubspec.yaml"
            else
                # Commit com mensagem autom√°tica
                COMMIT_MESSAGE="chore: atualizar vers√£o para $NEW_VERSION"
                git commit -m "$COMMIT_MESSAGE"
                echo "‚úÖ Commit realizado: $COMMIT_MESSAGE"
                
                # Push autom√°tico (se habilitado e em branch principal)
                if [ "${{ inputs.auto-push }}" = "true" ] && ([ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]); then
                    echo "üöÄ Realizando push autom√°tico..."
                    git push origin ${{ github.ref }}
                    echo "‚úÖ Push realizado com sucesso"
                elif [ "${{ inputs.auto-push }}" = "true" ]; then
                    echo "‚ÑπÔ∏è Push autom√°tico dispon√≠vel apenas para branches principais (master/main)"
                else
                    echo "‚ÑπÔ∏è Push autom√°tico desabilitado"
                fi
            fi
        else
            echo "‚ÑπÔ∏è Commit autom√°tico desabilitado"
        fi 